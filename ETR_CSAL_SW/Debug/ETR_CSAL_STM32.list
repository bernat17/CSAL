
ETR_CSAL_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b54  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002c14  08002c14  00003c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c54  08002c54  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c54  08002c54  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c54  08002c54  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c54  08002c54  00003c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c58  08002c58  00003c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c5c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08002c68  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002c68  000040e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac08  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba6  00000000  00000000  0000ec3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  000107e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000930  00000000  00000000  000113c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b5f  00000000  00000000  00011cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd7c  00000000  00000000  00025857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080c89  00000000  00000000  000325d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b325c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b1c  00000000  00000000  000b32a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000b5dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bfc 	.word	0x08002bfc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002bfc 	.word	0x08002bfc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <get_temperature>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float get_temperature(uint16_t lectura_adc){
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	801a      	strh	r2, [r3, #0]
	uint8_t i=0;
 800022c:	230f      	movs	r3, #15
 800022e:	18fb      	adds	r3, r7, r3
 8000230:	2200      	movs	r2, #0
 8000232:	701a      	strb	r2, [r3, #0]
	float y1=vector_vin[i-1];
	float m=(y2-y1)/(x2-x1);
	float temp = (vin-y1+m*x1)/m;
	return temp;
	*/
}
 8000234:	46c0      	nop			@ (mov r8, r8)
 8000236:	1c18      	adds	r0, r3, #0
 8000238:	46bd      	mov	sp, r7
 800023a:	b004      	add	sp, #16
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000244:	f000 faf1 	bl	800082a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000248:	f000 f820 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024c:	f000 f920 	bl	8000490 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000250:	f000 f8c8 	bl	80003e4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000254:	f000 f860 	bl	8000318 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000258:	4b09      	ldr	r3, [pc, #36]	@ (8000280 <main+0x40>)
 800025a:	0018      	movs	r0, r3
 800025c:	f002 f8da 	bl	8002414 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 8000260:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <main+0x44>)
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fe5e 	bl	8000f24 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000268:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <main+0x48>)
 800026a:	2108      	movs	r1, #8
 800026c:	0018      	movs	r0, r3
 800026e:	f001 fc02 	bl	8001a76 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000272:	23fa      	movs	r3, #250	@ 0xfa
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fb54 	bl	8000924 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800027c:	46c0      	nop			@ (mov r8, r8)
 800027e:	e7f3      	b.n	8000268 <main+0x28>
 8000280:	2000008c 	.word	0x2000008c
 8000284:	20000028 	.word	0x20000028
 8000288:	50000400 	.word	0x50000400

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b08d      	sub	sp, #52	@ 0x34
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	2414      	movs	r4, #20
 8000294:	193b      	adds	r3, r7, r4
 8000296:	0018      	movs	r0, r3
 8000298:	231c      	movs	r3, #28
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f002 fc81 	bl	8002ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	003b      	movs	r3, r7
 80002a4:	0018      	movs	r0, r3
 80002a6:	2314      	movs	r3, #20
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f002 fc7a 	bl	8002ba4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2202      	movs	r2, #2
 80002b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b6:	193b      	adds	r3, r7, r4
 80002b8:	2280      	movs	r2, #128	@ 0x80
 80002ba:	0052      	lsls	r2, r2, #1
 80002bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	2280      	movs	r2, #128	@ 0x80
 80002c2:	0152      	lsls	r2, r2, #5
 80002c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2240      	movs	r2, #64	@ 0x40
 80002ca:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 fc2a 	bl	8001b28 <HAL_RCC_OscConfig>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002d8:	f000 f98e 	bl	80005f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	003b      	movs	r3, r7
 80002de:	2207      	movs	r2, #7
 80002e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e2:	003b      	movs	r3, r7
 80002e4:	2200      	movs	r2, #0
 80002e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	003b      	movs	r3, r7
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002ee:	003b      	movs	r3, r7
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV16;
 80002f4:	003b      	movs	r3, r7
 80002f6:	22e0      	movs	r2, #224	@ 0xe0
 80002f8:	01d2      	lsls	r2, r2, #7
 80002fa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fc:	003b      	movs	r3, r7
 80002fe:	2100      	movs	r1, #0
 8000300:	0018      	movs	r0, r3
 8000302:	f001 fdf5 	bl	8001ef0 <HAL_RCC_ClockConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800030a:	f000 f975 	bl	80005f8 <Error_Handler>
  }
}
 800030e:	46c0      	nop			@ (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	b00d      	add	sp, #52	@ 0x34
 8000314:	bd90      	pop	{r4, r7, pc}
	...

08000318 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	0018      	movs	r0, r3
 8000322:	230c      	movs	r3, #12
 8000324:	001a      	movs	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	f002 fc3c 	bl	8002ba4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800032c:	4b2b      	ldr	r3, [pc, #172]	@ (80003dc <MX_ADC1_Init+0xc4>)
 800032e:	4a2c      	ldr	r2, [pc, #176]	@ (80003e0 <MX_ADC1_Init+0xc8>)
 8000330:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000332:	4b2a      	ldr	r3, [pc, #168]	@ (80003dc <MX_ADC1_Init+0xc4>)
 8000334:	2280      	movs	r2, #128	@ 0x80
 8000336:	05d2      	lsls	r2, r2, #23
 8000338:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800033a:	4b28      	ldr	r3, [pc, #160]	@ (80003dc <MX_ADC1_Init+0xc4>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000340:	4b26      	ldr	r3, [pc, #152]	@ (80003dc <MX_ADC1_Init+0xc4>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000346:	4b25      	ldr	r3, [pc, #148]	@ (80003dc <MX_ADC1_Init+0xc4>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800034c:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <MX_ADC1_Init+0xc4>)
 800034e:	2204      	movs	r2, #4
 8000350:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000352:	4b22      	ldr	r3, [pc, #136]	@ (80003dc <MX_ADC1_Init+0xc4>)
 8000354:	2200      	movs	r2, #0
 8000356:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000358:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <MX_ADC1_Init+0xc4>)
 800035a:	2200      	movs	r2, #0
 800035c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800035e:	4b1f      	ldr	r3, [pc, #124]	@ (80003dc <MX_ADC1_Init+0xc4>)
 8000360:	2201      	movs	r2, #1
 8000362:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000364:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <MX_ADC1_Init+0xc4>)
 8000366:	2201      	movs	r2, #1
 8000368:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800036a:	4b1c      	ldr	r3, [pc, #112]	@ (80003dc <MX_ADC1_Init+0xc4>)
 800036c:	2200      	movs	r2, #0
 800036e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000370:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <MX_ADC1_Init+0xc4>)
 8000372:	2200      	movs	r2, #0
 8000374:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000376:	4b19      	ldr	r3, [pc, #100]	@ (80003dc <MX_ADC1_Init+0xc4>)
 8000378:	222c      	movs	r2, #44	@ 0x2c
 800037a:	2100      	movs	r1, #0
 800037c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <MX_ADC1_Init+0xc4>)
 8000380:	2200      	movs	r2, #0
 8000382:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <MX_ADC1_Init+0xc4>)
 8000386:	2207      	movs	r2, #7
 8000388:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <MX_ADC1_Init+0xc4>)
 800038c:	2207      	movs	r2, #7
 800038e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <MX_ADC1_Init+0xc4>)
 8000392:	223c      	movs	r2, #60	@ 0x3c
 8000394:	2100      	movs	r1, #0
 8000396:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000398:	4b10      	ldr	r3, [pc, #64]	@ (80003dc <MX_ADC1_Init+0xc4>)
 800039a:	2200      	movs	r2, #0
 800039c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800039e:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <MX_ADC1_Init+0xc4>)
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 fc19 	bl	8000bd8 <HAL_ADC_Init>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80003aa:	f000 f925 	bl	80005f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2201      	movs	r2, #1
 80003b2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c0:	1d3a      	adds	r2, r7, #4
 80003c2:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <MX_ADC1_Init+0xc4>)
 80003c4:	0011      	movs	r1, r2
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 fe94 	bl	80010f4 <HAL_ADC_ConfigChannel>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80003d0:	f000 f912 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003d4:	46c0      	nop			@ (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b004      	add	sp, #16
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000028 	.word	0x20000028
 80003e0:	40012400 	.word	0x40012400

080003e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b088      	sub	sp, #32
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ea:	2310      	movs	r3, #16
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	0018      	movs	r0, r3
 80003f0:	2310      	movs	r3, #16
 80003f2:	001a      	movs	r2, r3
 80003f4:	2100      	movs	r1, #0
 80003f6:	f002 fbd5 	bl	8002ba4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	0018      	movs	r0, r3
 80003fe:	230c      	movs	r3, #12
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f002 fbce 	bl	8002ba4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000408:	4b1e      	ldr	r3, [pc, #120]	@ (8000484 <MX_TIM3_Init+0xa0>)
 800040a:	4a1f      	ldr	r2, [pc, #124]	@ (8000488 <MX_TIM3_Init+0xa4>)
 800040c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 800040e:	4b1d      	ldr	r3, [pc, #116]	@ (8000484 <MX_TIM3_Init+0xa0>)
 8000410:	224f      	movs	r2, #79	@ 0x4f
 8000412:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000414:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <MX_TIM3_Init+0xa0>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800041a:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <MX_TIM3_Init+0xa0>)
 800041c:	4a1b      	ldr	r2, [pc, #108]	@ (800048c <MX_TIM3_Init+0xa8>)
 800041e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <MX_TIM3_Init+0xa0>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000426:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <MX_TIM3_Init+0xa0>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800042c:	4b15      	ldr	r3, [pc, #84]	@ (8000484 <MX_TIM3_Init+0xa0>)
 800042e:	0018      	movs	r0, r3
 8000430:	f001 ff98 	bl	8002364 <HAL_TIM_Base_Init>
 8000434:	1e03      	subs	r3, r0, #0
 8000436:	d001      	beq.n	800043c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000438:	f000 f8de 	bl	80005f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800043c:	2110      	movs	r1, #16
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2280      	movs	r2, #128	@ 0x80
 8000442:	0152      	lsls	r2, r2, #5
 8000444:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000446:	187a      	adds	r2, r7, r1
 8000448:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <MX_TIM3_Init+0xa0>)
 800044a:	0011      	movs	r1, r2
 800044c:	0018      	movs	r0, r3
 800044e:	f002 f931 	bl	80026b4 <HAL_TIM_ConfigClockSource>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000456:	f000 f8cf 	bl	80005f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000466:	1d3a      	adds	r2, r7, #4
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <MX_TIM3_Init+0xa0>)
 800046a:	0011      	movs	r1, r2
 800046c:	0018      	movs	r0, r3
 800046e:	f002 fb1f 	bl	8002ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d001      	beq.n	800047a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000476:	f000 f8bf 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b008      	add	sp, #32
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	2000008c 	.word	0x2000008c
 8000488:	40000400 	.word	0x40000400
 800048c:	0000270f 	.word	0x0000270f

08000490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000490:	b590      	push	{r4, r7, lr}
 8000492:	b089      	sub	sp, #36	@ 0x24
 8000494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	240c      	movs	r4, #12
 8000498:	193b      	adds	r3, r7, r4
 800049a:	0018      	movs	r0, r3
 800049c:	2314      	movs	r3, #20
 800049e:	001a      	movs	r2, r3
 80004a0:	2100      	movs	r1, #0
 80004a2:	f002 fb7f 	bl	8002ba4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b39      	ldr	r3, [pc, #228]	@ (800058c <MX_GPIO_Init+0xfc>)
 80004a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004aa:	4b38      	ldr	r3, [pc, #224]	@ (800058c <MX_GPIO_Init+0xfc>)
 80004ac:	2101      	movs	r1, #1
 80004ae:	430a      	orrs	r2, r1
 80004b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80004b2:	4b36      	ldr	r3, [pc, #216]	@ (800058c <MX_GPIO_Init+0xfc>)
 80004b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004b6:	2201      	movs	r2, #1
 80004b8:	4013      	ands	r3, r2
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004be:	4b33      	ldr	r3, [pc, #204]	@ (800058c <MX_GPIO_Init+0xfc>)
 80004c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004c2:	4b32      	ldr	r3, [pc, #200]	@ (800058c <MX_GPIO_Init+0xfc>)
 80004c4:	2102      	movs	r1, #2
 80004c6:	430a      	orrs	r2, r1
 80004c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80004ca:	4b30      	ldr	r3, [pc, #192]	@ (800058c <MX_GPIO_Init+0xfc>)
 80004cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004ce:	2202      	movs	r2, #2
 80004d0:	4013      	ands	r3, r2
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80004d6:	23c0      	movs	r3, #192	@ 0xc0
 80004d8:	0159      	lsls	r1, r3, #5
 80004da:	23a0      	movs	r3, #160	@ 0xa0
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2200      	movs	r2, #0
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 faab 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80004e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000590 <MX_GPIO_Init+0x100>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	2118      	movs	r1, #24
 80004ec:	0018      	movs	r0, r3
 80004ee:	f001 faa5 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	221c      	movs	r2, #28
 80004f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	4a26      	ldr	r2, [pc, #152]	@ (8000594 <MX_GPIO_Init+0x104>)
 80004fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	193a      	adds	r2, r7, r4
 8000506:	23a0      	movs	r3, #160	@ 0xa0
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	0011      	movs	r1, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f001 f923 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000512:	0021      	movs	r1, r4
 8000514:	187b      	adds	r3, r7, r1
 8000516:	22c0      	movs	r2, #192	@ 0xc0
 8000518:	0152      	lsls	r2, r2, #5
 800051a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	000c      	movs	r4, r1
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2201      	movs	r2, #1
 8000522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	193a      	adds	r2, r7, r4
 8000532:	23a0      	movs	r3, #160	@ 0xa0
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f001 f90d 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2218      	movs	r2, #24
 8000544:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2201      	movs	r2, #1
 800054a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000558:	187b      	adds	r3, r7, r1
 800055a:	4a0d      	ldr	r2, [pc, #52]	@ (8000590 <MX_GPIO_Init+0x100>)
 800055c:	0019      	movs	r1, r3
 800055e:	0010      	movs	r0, r2
 8000560:	f001 f8fa 	bl	8001758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	2100      	movs	r1, #0
 8000568:	2006      	movs	r0, #6
 800056a:	f001 f8c3 	bl	80016f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800056e:	2006      	movs	r0, #6
 8000570:	f001 f8d5 	bl	800171e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2100      	movs	r1, #0
 8000578:	2007      	movs	r0, #7
 800057a:	f001 f8bb 	bl	80016f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800057e:	2007      	movs	r0, #7
 8000580:	f001 f8cd 	bl	800171e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000584:	46c0      	nop			@ (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b009      	add	sp, #36	@ 0x24
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	50000400 	.word	0x50000400
 8000594:	10110000 	.word	0x10110000

08000598 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim3 )
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d11a      	bne.n	80005de <HAL_TIM_PeriodElapsedCallback+0x46>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80005a8:	4b10      	ldr	r3, [pc, #64]	@ (80005ec <HAL_TIM_PeriodElapsedCallback+0x54>)
 80005aa:	2110      	movs	r1, #16
 80005ac:	0018      	movs	r0, r3
 80005ae:	f001 fa62 	bl	8001a76 <HAL_GPIO_TogglePin>
    //llegir ADC
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80005b2:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005b4:	210a      	movs	r1, #10
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 fd02 	bl	8000fc0 <HAL_ADC_PollForConversion>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d107      	bne.n	80005d0 <HAL_TIM_PeriodElapsedCallback+0x38>
        uint16_t adc_in = HAL_ADC_GetValue(&hadc1);
 80005c0:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fd8a 	bl	80010dc <HAL_ADC_GetValue>
 80005c8:	0002      	movs	r2, r0
 80005ca:	230e      	movs	r3, #14
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	801a      	strh	r2, [r3, #0]
      }
    float temperatura=get_temperature(adc_in);
 80005d0:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	0018      	movs	r0, r3
 80005d6:	f7ff fe23 	bl	8000220 <get_temperature>
 80005da:	1c03      	adds	r3, r0, #0
 80005dc:	60bb      	str	r3, [r7, #8]
    //float temperatura=get_temperature(adc_in);
    //obtenir valor temperatura

    //funció regulador de temperatura
  }
}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b004      	add	sp, #16
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	50000400 	.word	0x50000400
 80005f0:	20000028 	.word	0x20000028
 80005f4:	200000d8 	.word	0x200000d8

080005f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fc:	b672      	cpsid	i
}
 80005fe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	e7fd      	b.n	8000600 <Error_Handler+0x8>

08000604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <HAL_MspInit+0x44>)
 800060c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <HAL_MspInit+0x44>)
 8000610:	2101      	movs	r1, #1
 8000612:	430a      	orrs	r2, r1
 8000614:	641a      	str	r2, [r3, #64]	@ 0x40
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <HAL_MspInit+0x44>)
 8000618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061a:	2201      	movs	r2, #1
 800061c:	4013      	ands	r3, r2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <HAL_MspInit+0x44>)
 8000624:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000626:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <HAL_MspInit+0x44>)
 8000628:	2180      	movs	r1, #128	@ 0x80
 800062a:	0549      	lsls	r1, r1, #21
 800062c:	430a      	orrs	r2, r1
 800062e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000630:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <HAL_MspInit+0x44>)
 8000632:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000634:	2380      	movs	r3, #128	@ 0x80
 8000636:	055b      	lsls	r3, r3, #21
 8000638:	4013      	ands	r3, r2
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b002      	add	sp, #8
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	40021000 	.word	0x40021000

0800064c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b091      	sub	sp, #68	@ 0x44
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	232c      	movs	r3, #44	@ 0x2c
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	0018      	movs	r0, r3
 800065a:	2314      	movs	r3, #20
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f002 faa0 	bl	8002ba4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000664:	2410      	movs	r4, #16
 8000666:	193b      	adds	r3, r7, r4
 8000668:	0018      	movs	r0, r3
 800066a:	231c      	movs	r3, #28
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f002 fa98 	bl	8002ba4 <memset>
  if(hadc->Instance==ADC1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a20      	ldr	r2, [pc, #128]	@ (80006fc <HAL_ADC_MspInit+0xb0>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d139      	bne.n	80006f2 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2280      	movs	r2, #128	@ 0x80
 8000682:	01d2      	lsls	r2, r2, #7
 8000684:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068c:	193b      	adds	r3, r7, r4
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fd7a 	bl	8002188 <HAL_RCCEx_PeriphCLKConfig>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000698:	f7ff ffae 	bl	80005f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800069c:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <HAL_ADC_MspInit+0xb4>)
 800069e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <HAL_ADC_MspInit+0xb4>)
 80006a2:	2180      	movs	r1, #128	@ 0x80
 80006a4:	0349      	lsls	r1, r1, #13
 80006a6:	430a      	orrs	r2, r1
 80006a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80006aa:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <HAL_ADC_MspInit+0xb4>)
 80006ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006ae:	2380      	movs	r3, #128	@ 0x80
 80006b0:	035b      	lsls	r3, r3, #13
 80006b2:	4013      	ands	r3, r2
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <HAL_ADC_MspInit+0xb4>)
 80006ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006bc:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <HAL_ADC_MspInit+0xb4>)
 80006be:	2101      	movs	r1, #1
 80006c0:	430a      	orrs	r2, r1
 80006c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80006c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <HAL_ADC_MspInit+0xb4>)
 80006c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006c8:	2201      	movs	r2, #1
 80006ca:	4013      	ands	r3, r2
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d0:	212c      	movs	r1, #44	@ 0x2c
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2201      	movs	r2, #1
 80006d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2203      	movs	r2, #3
 80006dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	187a      	adds	r2, r7, r1
 80006e6:	23a0      	movs	r3, #160	@ 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 f833 	bl	8001758 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b011      	add	sp, #68	@ 0x44
 80006f8:	bd90      	pop	{r4, r7, pc}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	40012400 	.word	0x40012400
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a0d      	ldr	r2, [pc, #52]	@ (8000748 <HAL_TIM_Base_MspInit+0x44>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d113      	bne.n	800073e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <HAL_TIM_Base_MspInit+0x48>)
 8000718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <HAL_TIM_Base_MspInit+0x48>)
 800071c:	2102      	movs	r1, #2
 800071e:	430a      	orrs	r2, r1
 8000720:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <HAL_TIM_Base_MspInit+0x48>)
 8000724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000726:	2202      	movs	r2, #2
 8000728:	4013      	ands	r3, r2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	2010      	movs	r0, #16
 8000734:	f000 ffde 	bl	80016f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000738:	2010      	movs	r0, #16
 800073a:	f000 fff0 	bl	800171e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b004      	add	sp, #16
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			@ (mov r8, r8)
 8000748:	40000400 	.word	0x40000400
 800074c:	40021000 	.word	0x40021000

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000754:	46c0      	nop			@ (mov r8, r8)
 8000756:	e7fd      	b.n	8000754 <NMI_Handler+0x4>

08000758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	e7fd      	b.n	800075c <HardFault_Handler+0x4>

08000760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000778:	f000 f8b8 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000786:	2004      	movs	r0, #4
 8000788:	f001 f990 	bl	8001aac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800078c:	2008      	movs	r0, #8
 800078e:	f001 f98d 	bl	8001aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800079c:	2010      	movs	r0, #16
 800079e:	f001 f985 	bl	8001aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80007ac:	4b03      	ldr	r3, [pc, #12]	@ (80007bc <TIM3_IRQHandler+0x14>)
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 fe7e 	bl	80024b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	2000008c 	.word	0x2000008c

080007c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007c4:	4b03      	ldr	r3, [pc, #12]	@ (80007d4 <SystemInit+0x14>)
 80007c6:	2280      	movs	r2, #128	@ 0x80
 80007c8:	0512      	lsls	r2, r2, #20
 80007ca:	609a      	str	r2, [r3, #8]
#endif
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d8:	480d      	ldr	r0, [pc, #52]	@ (8000810 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007dc:	f7ff fff0 	bl	80007c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007e2:	e003      	b.n	80007ec <LoopCopyDataInit>

080007e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80007e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007ea:	3104      	adds	r1, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007ec:	480a      	ldr	r0, [pc, #40]	@ (8000818 <LoopForever+0xa>)
  ldr r3, =_edata
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <LoopForever+0xe>)
  adds r2, r0, r1
 80007f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007f4:	d3f6      	bcc.n	80007e4 <CopyDataInit>
  ldr r2, =_sbss
 80007f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <LoopForever+0x12>)
  b LoopFillZerobss
 80007f8:	e002      	b.n	8000800 <LoopFillZerobss>

080007fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  str  r3, [r2]
 80007fc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fe:	3204      	adds	r2, #4

08000800 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <LoopForever+0x16>)
  cmp r2, r3
 8000802:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000804:	d3f9      	bcc.n	80007fa <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000806:	f002 f9d5 	bl	8002bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080a:	f7ff fd19 	bl	8000240 <main>

0800080e <LoopForever>:

LoopForever:
    b LoopForever
 800080e:	e7fe      	b.n	800080e <LoopForever>
  ldr   r0, =_estack
 8000810:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000814:	08002c5c 	.word	0x08002c5c
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800081c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000820:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000824:	200000e0 	.word	0x200000e0

08000828 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_IRQHandler>

0800082a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000836:	2003      	movs	r0, #3
 8000838:	f000 f80e 	bl	8000858 <HAL_InitTick>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d003      	beq.n	8000848 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	e001      	b.n	800084c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000848:	f7ff fedc 	bl	8000604 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781b      	ldrb	r3, [r3, #0]
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	b002      	add	sp, #8
 8000856:	bd80      	pop	{r7, pc}

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000860:	230f      	movs	r3, #15
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000868:	4b1d      	ldr	r3, [pc, #116]	@ (80008e0 <HAL_InitTick+0x88>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d02b      	beq.n	80008c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000870:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <HAL_InitTick+0x8c>)
 8000872:	681c      	ldr	r4, [r3, #0]
 8000874:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <HAL_InitTick+0x88>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	0019      	movs	r1, r3
 800087a:	23fa      	movs	r3, #250	@ 0xfa
 800087c:	0098      	lsls	r0, r3, #2
 800087e:	f7ff fc43 	bl	8000108 <__udivsi3>
 8000882:	0003      	movs	r3, r0
 8000884:	0019      	movs	r1, r3
 8000886:	0020      	movs	r0, r4
 8000888:	f7ff fc3e 	bl	8000108 <__udivsi3>
 800088c:	0003      	movs	r3, r0
 800088e:	0018      	movs	r0, r3
 8000890:	f000 ff55 	bl	800173e <HAL_SYSTICK_Config>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d112      	bne.n	80008be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b03      	cmp	r3, #3
 800089c:	d80a      	bhi.n	80008b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	2301      	movs	r3, #1
 80008a2:	425b      	negs	r3, r3
 80008a4:	2200      	movs	r2, #0
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 ff24 	bl	80016f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <HAL_InitTick+0x90>)
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	e00d      	b.n	80008d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008b4:	230f      	movs	r3, #15
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	e008      	b.n	80008d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008be:	230f      	movs	r3, #15
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	e003      	b.n	80008d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008c8:	230f      	movs	r3, #15
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008d0:	230f      	movs	r3, #15
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	781b      	ldrb	r3, [r3, #0]
}
 80008d6:	0018      	movs	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	b005      	add	sp, #20
 80008dc:	bd90      	pop	{r4, r7, pc}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000004 	.word	0x20000004

080008ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <HAL_IncTick+0x1c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	001a      	movs	r2, r3
 80008f6:	4b05      	ldr	r3, [pc, #20]	@ (800090c <HAL_IncTick+0x20>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	18d2      	adds	r2, r2, r3
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <HAL_IncTick+0x20>)
 80008fe:	601a      	str	r2, [r3, #0]
}
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	20000008 	.word	0x20000008
 800090c:	200000dc 	.word	0x200000dc

08000910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b02      	ldr	r3, [pc, #8]	@ (8000920 <HAL_GetTick+0x10>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	200000dc 	.word	0x200000dc

08000924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff fff0 	bl	8000910 <HAL_GetTick>
 8000930:	0003      	movs	r3, r0
 8000932:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3301      	adds	r3, #1
 800093c:	d005      	beq.n	800094a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <HAL_Delay+0x44>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	001a      	movs	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	189b      	adds	r3, r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	f7ff ffe0 	bl	8000910 <HAL_GetTick>
 8000950:	0002      	movs	r2, r0
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	429a      	cmp	r2, r3
 800095a:	d8f7      	bhi.n	800094c <HAL_Delay+0x28>
  {
  }
}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b004      	add	sp, #16
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	20000008 	.word	0x20000008

0800096c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800097c:	401a      	ands	r2, r3
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	431a      	orrs	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	ff3fffff 	.word	0xff3fffff

08000994 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	23c0      	movs	r3, #192	@ 0xc0
 80009a2:	041b      	lsls	r3, r3, #16
 80009a4:	4013      	ands	r3, r2
}
 80009a6:	0018      	movs	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b002      	add	sp, #8
 80009ac:	bd80      	pop	{r7, pc}

080009ae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b084      	sub	sp, #16
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	2104      	movs	r1, #4
 80009c2:	400a      	ands	r2, r1
 80009c4:	2107      	movs	r1, #7
 80009c6:	4091      	lsls	r1, r2
 80009c8:	000a      	movs	r2, r1
 80009ca:	43d2      	mvns	r2, r2
 80009cc:	401a      	ands	r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	2104      	movs	r1, #4
 80009d2:	400b      	ands	r3, r1
 80009d4:	6879      	ldr	r1, [r7, #4]
 80009d6:	4099      	lsls	r1, r3
 80009d8:	000b      	movs	r3, r1
 80009da:	431a      	orrs	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b004      	add	sp, #16
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	2104      	movs	r1, #4
 80009fa:	400a      	ands	r2, r1
 80009fc:	2107      	movs	r1, #7
 80009fe:	4091      	lsls	r1, r2
 8000a00:	000a      	movs	r2, r1
 8000a02:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	2104      	movs	r1, #4
 8000a08:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000a0a:	40da      	lsrs	r2, r3
 8000a0c:	0013      	movs	r3, r2
}
 8000a0e:	0018      	movs	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b002      	add	sp, #8
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	68da      	ldr	r2, [r3, #12]
 8000a22:	23c0      	movs	r3, #192	@ 0xc0
 8000a24:	011b      	lsls	r3, r3, #4
 8000a26:	4013      	ands	r3, r2
 8000a28:	d101      	bne.n	8000a2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e000      	b.n	8000a30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b002      	add	sp, #8
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	211f      	movs	r1, #31
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	210f      	movs	r1, #15
 8000a50:	4091      	lsls	r1, r2
 8000a52:	000a      	movs	r2, r1
 8000a54:	43d2      	mvns	r2, r2
 8000a56:	401a      	ands	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	0e9b      	lsrs	r3, r3, #26
 8000a5c:	210f      	movs	r1, #15
 8000a5e:	4019      	ands	r1, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	201f      	movs	r0, #31
 8000a64:	4003      	ands	r3, r0
 8000a66:	4099      	lsls	r1, r3
 8000a68:	000b      	movs	r3, r1
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b004      	add	sp, #16
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	025b      	lsls	r3, r3, #9
 8000a8a:	0a5b      	lsrs	r3, r3, #9
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	0252      	lsls	r2, r2, #9
 8000aac:	0a52      	lsrs	r2, r2, #9
 8000aae:	43d2      	mvns	r2, r2
 8000ab0:	401a      	ands	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	68ba      	ldr	r2, [r7, #8]
 8000ad2:	0212      	lsls	r2, r2, #8
 8000ad4:	43d2      	mvns	r2, r2
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	400b      	ands	r3, r1
 8000ae0:	4904      	ldr	r1, [pc, #16]	@ (8000af4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000ae2:	400b      	ands	r3, r1
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b004      	add	sp, #16
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	7fffff00 	.word	0x7fffff00

08000af8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	4a05      	ldr	r2, [pc, #20]	@ (8000b1c <LL_ADC_EnableInternalRegulator+0x24>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	2280      	movs	r2, #128	@ 0x80
 8000b0a:	0552      	lsls	r2, r2, #21
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	6fffffe8 	.word	0x6fffffe8

08000b20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689a      	ldr	r2, [r3, #8]
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	055b      	lsls	r3, r3, #21
 8000b30:	401a      	ands	r2, r3
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	055b      	lsls	r3, r3, #21
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d101      	bne.n	8000b3e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	4a04      	ldr	r2, [pc, #16]	@ (8000b68 <LL_ADC_Enable+0x20>)
 8000b56:	4013      	ands	r3, r2
 8000b58:	2201      	movs	r2, #1
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	7fffffe8 	.word	0x7fffffe8

08000b6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d101      	bne.n	8000b84 <LL_ADC_IsEnabled+0x18>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <LL_ADC_IsEnabled+0x1a>
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	0018      	movs	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <LL_ADC_REG_StartConversion+0x20>)
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ba8:	46c0      	nop			@ (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	7fffffe8 	.word	0x7fffffe8

08000bb4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d101      	bne.n	8000bcc <LL_ADC_REG_IsConversionOngoing+0x18>
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e000      	b.n	8000bce <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	0018      	movs	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b002      	add	sp, #8
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be0:	231f      	movs	r3, #31
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e17e      	b.n	8000efc <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10a      	bne.n	8000c1c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff fd1f 	bl	800064c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2254      	movs	r2, #84	@ 0x54
 8000c18:	2100      	movs	r1, #0
 8000c1a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff ff7d 	bl	8000b20 <LL_ADC_IsInternalRegulatorEnabled>
 8000c26:	1e03      	subs	r3, r0, #0
 8000c28:	d114      	bne.n	8000c54 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff ff62 	bl	8000af8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000c34:	4bb3      	ldr	r3, [pc, #716]	@ (8000f04 <HAL_ADC_Init+0x32c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	49b3      	ldr	r1, [pc, #716]	@ (8000f08 <HAL_ADC_Init+0x330>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff fa64 	bl	8000108 <__udivsi3>
 8000c40:	0003      	movs	r3, r0
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c46:	e002      	b.n	8000c4e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f9      	bne.n	8000c48 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff ff61 	bl	8000b20 <LL_ADC_IsInternalRegulatorEnabled>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d10f      	bne.n	8000c82 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c66:	2210      	movs	r2, #16
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c72:	2201      	movs	r2, #1
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000c7a:	231f      	movs	r3, #31
 8000c7c:	18fb      	adds	r3, r7, r3
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff ff94 	bl	8000bb4 <LL_ADC_REG_IsConversionOngoing>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c94:	2210      	movs	r2, #16
 8000c96:	4013      	ands	r3, r2
 8000c98:	d000      	beq.n	8000c9c <HAL_ADC_Init+0xc4>
 8000c9a:	e122      	b.n	8000ee2 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d000      	beq.n	8000ca4 <HAL_ADC_Init+0xcc>
 8000ca2:	e11e      	b.n	8000ee2 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ca8:	4a98      	ldr	r2, [pc, #608]	@ (8000f0c <HAL_ADC_Init+0x334>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	2202      	movs	r2, #2
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f7ff ff57 	bl	8000b6c <LL_ADC_IsEnabled>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d000      	beq.n	8000cc4 <HAL_ADC_Init+0xec>
 8000cc2:	e0ad      	b.n	8000e20 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7e1b      	ldrb	r3, [r3, #24]
 8000ccc:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000cce:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7e5b      	ldrb	r3, [r3, #25]
 8000cd4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000cd6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7e9b      	ldrb	r3, [r3, #26]
 8000cdc:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000cde:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <HAL_ADC_Init+0x116>
 8000ce8:	2380      	movs	r3, #128	@ 0x80
 8000cea:	015b      	lsls	r3, r3, #5
 8000cec:	e000      	b.n	8000cf0 <HAL_ADC_Init+0x118>
 8000cee:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000cf0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000cf6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	da04      	bge.n	8000d0a <HAL_ADC_Init+0x132>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	085b      	lsrs	r3, r3, #1
 8000d08:	e001      	b.n	8000d0e <HAL_ADC_Init+0x136>
 8000d0a:	2380      	movs	r3, #128	@ 0x80
 8000d0c:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000d0e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	212c      	movs	r1, #44	@ 0x2c
 8000d14:	5c5b      	ldrb	r3, [r3, r1]
 8000d16:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d18:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2220      	movs	r2, #32
 8000d24:	5c9b      	ldrb	r3, [r3, r2]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d115      	bne.n	8000d56 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7e9b      	ldrb	r3, [r3, #26]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d105      	bne.n	8000d3e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	2280      	movs	r2, #128	@ 0x80
 8000d36:	0252      	lsls	r2, r2, #9
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
 8000d3c:	e00b      	b.n	8000d56 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d42:	2220      	movs	r2, #32
 8000d44:	431a      	orrs	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d4e:	2201      	movs	r2, #1
 8000d50:	431a      	orrs	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00a      	beq.n	8000d74 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d62:	23e0      	movs	r3, #224	@ 0xe0
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	4a65      	ldr	r2, [pc, #404]	@ (8000f10 <HAL_ADC_Init+0x338>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	0019      	movs	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	430a      	orrs	r2, r1
 8000d88:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	0f9b      	lsrs	r3, r3, #30
 8000d90:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d96:	4313      	orrs	r3, r2
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	223c      	movs	r2, #60	@ 0x3c
 8000da2:	5c9b      	ldrb	r3, [r3, r2]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d111      	bne.n	8000dcc <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	0f9b      	lsrs	r3, r3, #30
 8000dae:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000db4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000dba:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000dc0:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	4a50      	ldr	r2, [pc, #320]	@ (8000f14 <HAL_ADC_Init+0x33c>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	430a      	orrs	r2, r1
 8000de0:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	23c0      	movs	r3, #192	@ 0xc0
 8000de8:	061b      	lsls	r3, r3, #24
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d018      	beq.n	8000e20 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000df2:	2380      	movs	r3, #128	@ 0x80
 8000df4:	05db      	lsls	r3, r3, #23
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d012      	beq.n	8000e20 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000dfe:	2380      	movs	r3, #128	@ 0x80
 8000e00:	061b      	lsls	r3, r3, #24
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d00c      	beq.n	8000e20 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000e06:	4b44      	ldr	r3, [pc, #272]	@ (8000f18 <HAL_ADC_Init+0x340>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a44      	ldr	r2, [pc, #272]	@ (8000f1c <HAL_ADC_Init+0x344>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	0019      	movs	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	23f0      	movs	r3, #240	@ 0xf0
 8000e16:	039b      	lsls	r3, r3, #14
 8000e18:	401a      	ands	r2, r3
 8000e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f18 <HAL_ADC_Init+0x340>)
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6818      	ldr	r0, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e28:	001a      	movs	r2, r3
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f7ff fdbf 	bl	80009ae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e38:	4939      	ldr	r1, [pc, #228]	@ (8000f20 <HAL_ADC_Init+0x348>)
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	f7ff fdb7 	bl	80009ae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d109      	bne.n	8000e5c <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2110      	movs	r1, #16
 8000e54:	4249      	negs	r1, r1
 8000e56:	430a      	orrs	r2, r1
 8000e58:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e5a:	e018      	b.n	8000e8e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	2380      	movs	r3, #128	@ 0x80
 8000e62:	039b      	lsls	r3, r3, #14
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d112      	bne.n	8000e8e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	221c      	movs	r2, #28
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2210      	movs	r2, #16
 8000e7c:	4252      	negs	r2, r2
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0011      	movs	r1, r2
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2100      	movs	r1, #0
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff fda7 	bl	80009e8 <LL_ADC_GetSamplingTimeCommonChannels>
 8000e9a:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d10b      	bne.n	8000ebc <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eae:	2203      	movs	r2, #3
 8000eb0:	4393      	bics	r3, r2
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000eba:	e01c      	b.n	8000ef6 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec0:	2212      	movs	r2, #18
 8000ec2:	4393      	bics	r3, r2
 8000ec4:	2210      	movs	r2, #16
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8000ed8:	231f      	movs	r3, #31
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ee0:	e009      	b.n	8000ef6 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee6:	2210      	movs	r2, #16
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000eee:	231f      	movs	r3, #31
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000ef6:	231f      	movs	r3, #31
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	781b      	ldrb	r3, [r3, #0]
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b008      	add	sp, #32
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000000 	.word	0x20000000
 8000f08:	00030d40 	.word	0x00030d40
 8000f0c:	fffffefd 	.word	0xfffffefd
 8000f10:	ffde0201 	.word	0xffde0201
 8000f14:	1ffffc02 	.word	0x1ffffc02
 8000f18:	40012708 	.word	0x40012708
 8000f1c:	ffc3ffff 	.word	0xffc3ffff
 8000f20:	7fffff04 	.word	0x7fffff04

08000f24 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f24:	b5b0      	push	{r4, r5, r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	0018      	movs	r0, r3
 8000f32:	f7ff fe3f 	bl	8000bb4 <LL_ADC_REG_IsConversionOngoing>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d135      	bne.n	8000fa6 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2254      	movs	r2, #84	@ 0x54
 8000f3e:	5c9b      	ldrb	r3, [r3, r2]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d101      	bne.n	8000f48 <HAL_ADC_Start+0x24>
 8000f44:	2302      	movs	r3, #2
 8000f46:	e035      	b.n	8000fb4 <HAL_ADC_Start+0x90>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2254      	movs	r2, #84	@ 0x54
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f50:	250f      	movs	r5, #15
 8000f52:	197c      	adds	r4, r7, r5
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0018      	movs	r0, r3
 8000f58:	f000 faa2 	bl	80014a0 <ADC_Enable>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f60:	197b      	adds	r3, r7, r5
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d119      	bne.n	8000f9c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6c:	4a13      	ldr	r2, [pc, #76]	@ (8000fbc <HAL_ADC_Start+0x98>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2280      	movs	r2, #128	@ 0x80
 8000f72:	0052      	lsls	r2, r2, #1
 8000f74:	431a      	orrs	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	221c      	movs	r2, #28
 8000f86:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2254      	movs	r2, #84	@ 0x54
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff fdfb 	bl	8000b90 <LL_ADC_REG_StartConversion>
 8000f9a:	e008      	b.n	8000fae <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2254      	movs	r2, #84	@ 0x54
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	5499      	strb	r1, [r3, r2]
 8000fa4:	e003      	b.n	8000fae <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	2202      	movs	r2, #2
 8000fac:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fae:	230f      	movs	r3, #15
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	781b      	ldrb	r3, [r3, #0]
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b004      	add	sp, #16
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}
 8000fbc:	fffff0fe 	.word	0xfffff0fe

08000fc0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d102      	bne.n	8000fd8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	e00f      	b.n	8000ff8 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d007      	beq.n	8000ff4 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe8:	2220      	movs	r2, #32
 8000fea:	431a      	orrs	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e06c      	b.n	80010ce <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ff8:	f7ff fc8a 	bl	8000910 <HAL_GetTick>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001000:	e019      	b.n	8001036 <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	d016      	beq.n	8001036 <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001008:	f7ff fc82 	bl	8000910 <HAL_GetTick>
 800100c:	0002      	movs	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	429a      	cmp	r2, r3
 8001016:	d302      	bcc.n	800101e <HAL_ADC_PollForConversion+0x5e>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10b      	bne.n	8001036 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001022:	2204      	movs	r2, #4
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2254      	movs	r2, #84	@ 0x54
 800102e:	2100      	movs	r1, #0
 8001030:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e04b      	b.n	80010ce <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4013      	ands	r3, r2
 8001040:	d0df      	beq.n	8001002 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001046:	2280      	movs	r2, #128	@ 0x80
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff fcde 	bl	8000a16 <LL_ADC_REG_IsTriggerSourceSWStart>
 800105a:	1e03      	subs	r3, r0, #0
 800105c:	d02e      	beq.n	80010bc <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7e9b      	ldrb	r3, [r3, #26]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d12a      	bne.n	80010bc <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2208      	movs	r2, #8
 800106e:	4013      	ands	r3, r2
 8001070:	2b08      	cmp	r3, #8
 8001072:	d123      	bne.n	80010bc <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff fd9b 	bl	8000bb4 <LL_ADC_REG_IsConversionOngoing>
 800107e:	1e03      	subs	r3, r0, #0
 8001080:	d110      	bne.n	80010a4 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	210c      	movs	r1, #12
 800108e:	438a      	bics	r2, r1
 8001090:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001096:	4a10      	ldr	r2, [pc, #64]	@ (80010d8 <HAL_ADC_PollForConversion+0x118>)
 8001098:	4013      	ands	r3, r2
 800109a:	2201      	movs	r2, #1
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80010a2:	e00b      	b.n	80010bc <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a8:	2220      	movs	r2, #32
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010b4:	2201      	movs	r2, #1
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7e1b      	ldrb	r3, [r3, #24]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	220c      	movs	r2, #12
 80010ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	0018      	movs	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b004      	add	sp, #16
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	fffffefe 	.word	0xfffffefe

080010dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80010ea:	0018      	movs	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010fe:	2317      	movs	r3, #23
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2254      	movs	r2, #84	@ 0x54
 800110e:	5c9b      	ldrb	r3, [r3, r2]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d101      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x24>
 8001114:	2302      	movs	r3, #2
 8001116:	e1be      	b.n	8001496 <HAL_ADC_ConfigChannel+0x3a2>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2254      	movs	r2, #84	@ 0x54
 800111c:	2101      	movs	r1, #1
 800111e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff fd45 	bl	8000bb4 <LL_ADC_REG_IsConversionOngoing>
 800112a:	1e03      	subs	r3, r0, #0
 800112c:	d000      	beq.n	8001130 <HAL_ADC_ConfigChannel+0x3c>
 800112e:	e1a1      	b.n	8001474 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d100      	bne.n	800113a <HAL_ADC_ConfigChannel+0x46>
 8001138:	e152      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	2380      	movs	r3, #128	@ 0x80
 8001140:	061b      	lsls	r3, r3, #24
 8001142:	429a      	cmp	r2, r3
 8001144:	d004      	beq.n	8001150 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800114a:	4ac2      	ldr	r2, [pc, #776]	@ (8001454 <HAL_ADC_ConfigChannel+0x360>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d108      	bne.n	8001162 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0019      	movs	r1, r3
 800115a:	0010      	movs	r0, r2
 800115c:	f7ff fc8c 	bl	8000a78 <LL_ADC_REG_SetSequencerChAdd>
 8001160:	e0ed      	b.n	800133e <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	211f      	movs	r1, #31
 800116c:	400b      	ands	r3, r1
 800116e:	210f      	movs	r1, #15
 8001170:	4099      	lsls	r1, r3
 8001172:	000b      	movs	r3, r1
 8001174:	43db      	mvns	r3, r3
 8001176:	4013      	ands	r3, r2
 8001178:	0019      	movs	r1, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	025b      	lsls	r3, r3, #9
 8001180:	0a5b      	lsrs	r3, r3, #9
 8001182:	d105      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x9c>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	0e9b      	lsrs	r3, r3, #26
 800118a:	221f      	movs	r2, #31
 800118c:	4013      	ands	r3, r2
 800118e:	e0bc      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2201      	movs	r2, #1
 8001196:	4013      	ands	r3, r2
 8001198:	d000      	beq.n	800119c <HAL_ADC_ConfigChannel+0xa8>
 800119a:	e0b5      	b.n	8001308 <HAL_ADC_ConfigChannel+0x214>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2202      	movs	r2, #2
 80011a2:	4013      	ands	r3, r2
 80011a4:	d000      	beq.n	80011a8 <HAL_ADC_ConfigChannel+0xb4>
 80011a6:	e0ad      	b.n	8001304 <HAL_ADC_ConfigChannel+0x210>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2204      	movs	r2, #4
 80011ae:	4013      	ands	r3, r2
 80011b0:	d000      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0xc0>
 80011b2:	e0a5      	b.n	8001300 <HAL_ADC_ConfigChannel+0x20c>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2208      	movs	r2, #8
 80011ba:	4013      	ands	r3, r2
 80011bc:	d000      	beq.n	80011c0 <HAL_ADC_ConfigChannel+0xcc>
 80011be:	e09d      	b.n	80012fc <HAL_ADC_ConfigChannel+0x208>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2210      	movs	r2, #16
 80011c6:	4013      	ands	r3, r2
 80011c8:	d000      	beq.n	80011cc <HAL_ADC_ConfigChannel+0xd8>
 80011ca:	e095      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x204>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2220      	movs	r2, #32
 80011d2:	4013      	ands	r3, r2
 80011d4:	d000      	beq.n	80011d8 <HAL_ADC_ConfigChannel+0xe4>
 80011d6:	e08d      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x200>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2240      	movs	r2, #64	@ 0x40
 80011de:	4013      	ands	r3, r2
 80011e0:	d000      	beq.n	80011e4 <HAL_ADC_ConfigChannel+0xf0>
 80011e2:	e085      	b.n	80012f0 <HAL_ADC_ConfigChannel+0x1fc>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2280      	movs	r2, #128	@ 0x80
 80011ea:	4013      	ands	r3, r2
 80011ec:	d000      	beq.n	80011f0 <HAL_ADC_ConfigChannel+0xfc>
 80011ee:	e07d      	b.n	80012ec <HAL_ADC_ConfigChannel+0x1f8>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2380      	movs	r3, #128	@ 0x80
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	d000      	beq.n	80011fe <HAL_ADC_ConfigChannel+0x10a>
 80011fc:	e074      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x1f4>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	2380      	movs	r3, #128	@ 0x80
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4013      	ands	r3, r2
 8001208:	d000      	beq.n	800120c <HAL_ADC_ConfigChannel+0x118>
 800120a:	e06b      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x1f0>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	2380      	movs	r3, #128	@ 0x80
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4013      	ands	r3, r2
 8001216:	d000      	beq.n	800121a <HAL_ADC_ConfigChannel+0x126>
 8001218:	e062      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x1ec>
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	4013      	ands	r3, r2
 8001224:	d000      	beq.n	8001228 <HAL_ADC_ConfigChannel+0x134>
 8001226:	e059      	b.n	80012dc <HAL_ADC_ConfigChannel+0x1e8>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	015b      	lsls	r3, r3, #5
 8001230:	4013      	ands	r3, r2
 8001232:	d151      	bne.n	80012d8 <HAL_ADC_ConfigChannel+0x1e4>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	2380      	movs	r3, #128	@ 0x80
 800123a:	019b      	lsls	r3, r3, #6
 800123c:	4013      	ands	r3, r2
 800123e:	d149      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x1e0>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	01db      	lsls	r3, r3, #7
 8001248:	4013      	ands	r3, r2
 800124a:	d141      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x1dc>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2380      	movs	r3, #128	@ 0x80
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	4013      	ands	r3, r2
 8001256:	d139      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x1d8>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	025b      	lsls	r3, r3, #9
 8001260:	4013      	ands	r3, r2
 8001262:	d131      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x1d4>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2380      	movs	r3, #128	@ 0x80
 800126a:	029b      	lsls	r3, r3, #10
 800126c:	4013      	ands	r3, r2
 800126e:	d129      	bne.n	80012c4 <HAL_ADC_ConfigChannel+0x1d0>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	02db      	lsls	r3, r3, #11
 8001278:	4013      	ands	r3, r2
 800127a:	d121      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x1cc>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	@ 0x80
 8001282:	031b      	lsls	r3, r3, #12
 8001284:	4013      	ands	r3, r2
 8001286:	d119      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1c8>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2380      	movs	r3, #128	@ 0x80
 800128e:	035b      	lsls	r3, r3, #13
 8001290:	4013      	ands	r3, r2
 8001292:	d111      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x1c4>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	039b      	lsls	r3, r3, #14
 800129c:	4013      	ands	r3, r2
 800129e:	d109      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x1c0>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2380      	movs	r3, #128	@ 0x80
 80012a6:	03db      	lsls	r3, r3, #15
 80012a8:	4013      	ands	r3, r2
 80012aa:	d001      	beq.n	80012b0 <HAL_ADC_ConfigChannel+0x1bc>
 80012ac:	2316      	movs	r3, #22
 80012ae:	e02c      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012b0:	2300      	movs	r3, #0
 80012b2:	e02a      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012b4:	2315      	movs	r3, #21
 80012b6:	e028      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012b8:	2314      	movs	r3, #20
 80012ba:	e026      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012bc:	2313      	movs	r3, #19
 80012be:	e024      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012c0:	2312      	movs	r3, #18
 80012c2:	e022      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012c4:	2311      	movs	r3, #17
 80012c6:	e020      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012c8:	2310      	movs	r3, #16
 80012ca:	e01e      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012cc:	230f      	movs	r3, #15
 80012ce:	e01c      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012d0:	230e      	movs	r3, #14
 80012d2:	e01a      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012d4:	230d      	movs	r3, #13
 80012d6:	e018      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012d8:	230c      	movs	r3, #12
 80012da:	e016      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012dc:	230b      	movs	r3, #11
 80012de:	e014      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012e0:	230a      	movs	r3, #10
 80012e2:	e012      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012e4:	2309      	movs	r3, #9
 80012e6:	e010      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012e8:	2308      	movs	r3, #8
 80012ea:	e00e      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012ec:	2307      	movs	r3, #7
 80012ee:	e00c      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012f0:	2306      	movs	r3, #6
 80012f2:	e00a      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012f4:	2305      	movs	r3, #5
 80012f6:	e008      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012f8:	2304      	movs	r3, #4
 80012fa:	e006      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 80012fc:	2303      	movs	r3, #3
 80012fe:	e004      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 8001300:	2302      	movs	r3, #2
 8001302:	e002      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_ADC_ConfigChannel+0x216>
 8001308:	2300      	movs	r3, #0
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	6852      	ldr	r2, [r2, #4]
 800130e:	201f      	movs	r0, #31
 8001310:	4002      	ands	r2, r0
 8001312:	4093      	lsls	r3, r2
 8001314:	000a      	movs	r2, r1
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	429a      	cmp	r2, r3
 800132a:	d808      	bhi.n	800133e <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	6859      	ldr	r1, [r3, #4]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	001a      	movs	r2, r3
 800133a:	f7ff fb7d 	bl	8000a38 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	6819      	ldr	r1, [r3, #0]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	001a      	movs	r2, r3
 800134c:	f7ff fbb8 	bl	8000ac0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db00      	blt.n	800135a <HAL_ADC_ConfigChannel+0x266>
 8001358:	e096      	b.n	8001488 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800135a:	4b3f      	ldr	r3, [pc, #252]	@ (8001458 <HAL_ADC_ConfigChannel+0x364>)
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff fb19 	bl	8000994 <LL_ADC_GetCommonPathInternalCh>
 8001362:	0003      	movs	r3, r0
 8001364:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a3c      	ldr	r2, [pc, #240]	@ (800145c <HAL_ADC_ConfigChannel+0x368>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d123      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	2380      	movs	r3, #128	@ 0x80
 8001374:	041b      	lsls	r3, r3, #16
 8001376:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001378:	d11e      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	2280      	movs	r2, #128	@ 0x80
 800137e:	0412      	lsls	r2, r2, #16
 8001380:	4313      	orrs	r3, r2
 8001382:	4a35      	ldr	r2, [pc, #212]	@ (8001458 <HAL_ADC_ConfigChannel+0x364>)
 8001384:	0019      	movs	r1, r3
 8001386:	0010      	movs	r0, r2
 8001388:	f7ff faf0 	bl	800096c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800138c:	4b34      	ldr	r3, [pc, #208]	@ (8001460 <HAL_ADC_ConfigChannel+0x36c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4934      	ldr	r1, [pc, #208]	@ (8001464 <HAL_ADC_ConfigChannel+0x370>)
 8001392:	0018      	movs	r0, r3
 8001394:	f7fe feb8 	bl	8000108 <__udivsi3>
 8001398:	0003      	movs	r3, r0
 800139a:	001a      	movs	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	189b      	adds	r3, r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	3301      	adds	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80013a8:	e002      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f9      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013b6:	e067      	b.n	8001488 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001468 <HAL_ADC_ConfigChannel+0x374>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d162      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	2380      	movs	r3, #128	@ 0x80
 80013c6:	03db      	lsls	r3, r3, #15
 80013c8:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80013ca:	d15d      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	2280      	movs	r2, #128	@ 0x80
 80013d0:	03d2      	lsls	r2, r2, #15
 80013d2:	4313      	orrs	r3, r2
 80013d4:	4a20      	ldr	r2, [pc, #128]	@ (8001458 <HAL_ADC_ConfigChannel+0x364>)
 80013d6:	0019      	movs	r1, r3
 80013d8:	0010      	movs	r0, r2
 80013da:	f7ff fac7 	bl	800096c <LL_ADC_SetCommonPathInternalCh>
 80013de:	e053      	b.n	8001488 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	061b      	lsls	r3, r3, #24
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d004      	beq.n	80013f6 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013f0:	4a18      	ldr	r2, [pc, #96]	@ (8001454 <HAL_ADC_ConfigChannel+0x360>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d107      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	0019      	movs	r1, r3
 8001400:	0010      	movs	r0, r2
 8001402:	f7ff fb4a 	bl	8000a9a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	da3c      	bge.n	8001488 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800140e:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <HAL_ADC_ConfigChannel+0x364>)
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff fabf 	bl	8000994 <LL_ADC_GetCommonPathInternalCh>
 8001416:	0003      	movs	r3, r0
 8001418:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a0f      	ldr	r2, [pc, #60]	@ (800145c <HAL_ADC_ConfigChannel+0x368>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d108      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4a11      	ldr	r2, [pc, #68]	@ (800146c <HAL_ADC_ConfigChannel+0x378>)
 8001428:	4013      	ands	r3, r2
 800142a:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <HAL_ADC_ConfigChannel+0x364>)
 800142c:	0019      	movs	r1, r3
 800142e:	0010      	movs	r0, r2
 8001430:	f7ff fa9c 	bl	800096c <LL_ADC_SetCommonPathInternalCh>
 8001434:	e028      	b.n	8001488 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <HAL_ADC_ConfigChannel+0x374>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d123      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4a0b      	ldr	r2, [pc, #44]	@ (8001470 <HAL_ADC_ConfigChannel+0x37c>)
 8001444:	4013      	ands	r3, r2
 8001446:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <HAL_ADC_ConfigChannel+0x364>)
 8001448:	0019      	movs	r1, r3
 800144a:	0010      	movs	r0, r2
 800144c:	f7ff fa8e 	bl	800096c <LL_ADC_SetCommonPathInternalCh>
 8001450:	e01a      	b.n	8001488 <HAL_ADC_ConfigChannel+0x394>
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	80000004 	.word	0x80000004
 8001458:	40012708 	.word	0x40012708
 800145c:	a4000200 	.word	0xa4000200
 8001460:	20000000 	.word	0x20000000
 8001464:	00030d40 	.word	0x00030d40
 8001468:	a8000400 	.word	0xa8000400
 800146c:	ff7fffff 	.word	0xff7fffff
 8001470:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001478:	2220      	movs	r2, #32
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001480:	2317      	movs	r3, #23
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2254      	movs	r2, #84	@ 0x54
 800148c:	2100      	movs	r1, #0
 800148e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001490:	2317      	movs	r3, #23
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	781b      	ldrb	r3, [r3, #0]
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b006      	add	sp, #24
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			@ (mov r8, r8)

080014a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff fb5b 	bl	8000b6c <LL_ADC_IsEnabled>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d162      	bne.n	8001580 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4a32      	ldr	r2, [pc, #200]	@ (800158c <ADC_Enable+0xec>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	d00d      	beq.n	80014e2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ca:	2210      	movs	r2, #16
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d6:	2201      	movs	r2, #1
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e04f      	b.n	8001582 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	0018      	movs	r0, r3
 80014e8:	f7ff fb2e 	bl	8000b48 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80014ec:	4b28      	ldr	r3, [pc, #160]	@ (8001590 <ADC_Enable+0xf0>)
 80014ee:	0018      	movs	r0, r3
 80014f0:	f7ff fa50 	bl	8000994 <LL_ADC_GetCommonPathInternalCh>
 80014f4:	0002      	movs	r2, r0
 80014f6:	2380      	movs	r3, #128	@ 0x80
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	4013      	ands	r3, r2
 80014fc:	d00f      	beq.n	800151e <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80014fe:	4b25      	ldr	r3, [pc, #148]	@ (8001594 <ADC_Enable+0xf4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4925      	ldr	r1, [pc, #148]	@ (8001598 <ADC_Enable+0xf8>)
 8001504:	0018      	movs	r0, r3
 8001506:	f7fe fdff 	bl	8000108 <__udivsi3>
 800150a:	0003      	movs	r3, r0
 800150c:	3301      	adds	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001510:	e002      	b.n	8001518 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	3b01      	subs	r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f9      	bne.n	8001512 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7e5b      	ldrb	r3, [r3, #25]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d02c      	beq.n	8001580 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001526:	f7ff f9f3 	bl	8000910 <HAL_GetTick>
 800152a:	0003      	movs	r3, r0
 800152c:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800152e:	e020      	b.n	8001572 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0018      	movs	r0, r3
 8001536:	f7ff fb19 	bl	8000b6c <LL_ADC_IsEnabled>
 800153a:	1e03      	subs	r3, r0, #0
 800153c:	d104      	bne.n	8001548 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	0018      	movs	r0, r3
 8001544:	f7ff fb00 	bl	8000b48 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001548:	f7ff f9e2 	bl	8000910 <HAL_GetTick>
 800154c:	0002      	movs	r2, r0
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d90d      	bls.n	8001572 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155a:	2210      	movs	r2, #16
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001566:	2201      	movs	r2, #1
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e007      	b.n	8001582 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2201      	movs	r2, #1
 800157a:	4013      	ands	r3, r2
 800157c:	2b01      	cmp	r3, #1
 800157e:	d1d7      	bne.n	8001530 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	0018      	movs	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	b004      	add	sp, #16
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	80000017 	.word	0x80000017
 8001590:	40012708 	.word	0x40012708
 8001594:	20000000 	.word	0x20000000
 8001598:	00030d40 	.word	0x00030d40

0800159c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	0002      	movs	r2, r0
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	1dfb      	adds	r3, r7, #7
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80015ae:	d809      	bhi.n	80015c4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b0:	1dfb      	adds	r3, r7, #7
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	001a      	movs	r2, r3
 80015b6:	231f      	movs	r3, #31
 80015b8:	401a      	ands	r2, r3
 80015ba:	4b04      	ldr	r3, [pc, #16]	@ (80015cc <__NVIC_EnableIRQ+0x30>)
 80015bc:	2101      	movs	r1, #1
 80015be:	4091      	lsls	r1, r2
 80015c0:	000a      	movs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80015c4:	46c0      	nop			@ (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b002      	add	sp, #8
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	0002      	movs	r2, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80015e4:	d828      	bhi.n	8001638 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e6:	4a2f      	ldr	r2, [pc, #188]	@ (80016a4 <__NVIC_SetPriority+0xd4>)
 80015e8:	1dfb      	adds	r3, r7, #7
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	33c0      	adds	r3, #192	@ 0xc0
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	589b      	ldr	r3, [r3, r2]
 80015f6:	1dfa      	adds	r2, r7, #7
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	0011      	movs	r1, r2
 80015fc:	2203      	movs	r2, #3
 80015fe:	400a      	ands	r2, r1
 8001600:	00d2      	lsls	r2, r2, #3
 8001602:	21ff      	movs	r1, #255	@ 0xff
 8001604:	4091      	lsls	r1, r2
 8001606:	000a      	movs	r2, r1
 8001608:	43d2      	mvns	r2, r2
 800160a:	401a      	ands	r2, r3
 800160c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	019b      	lsls	r3, r3, #6
 8001612:	22ff      	movs	r2, #255	@ 0xff
 8001614:	401a      	ands	r2, r3
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	0018      	movs	r0, r3
 800161c:	2303      	movs	r3, #3
 800161e:	4003      	ands	r3, r0
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001624:	481f      	ldr	r0, [pc, #124]	@ (80016a4 <__NVIC_SetPriority+0xd4>)
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	b25b      	sxtb	r3, r3
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	430a      	orrs	r2, r1
 8001630:	33c0      	adds	r3, #192	@ 0xc0
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001636:	e031      	b.n	800169c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001638:	4a1b      	ldr	r2, [pc, #108]	@ (80016a8 <__NVIC_SetPriority+0xd8>)
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	0019      	movs	r1, r3
 8001640:	230f      	movs	r3, #15
 8001642:	400b      	ands	r3, r1
 8001644:	3b08      	subs	r3, #8
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3306      	adds	r3, #6
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	18d3      	adds	r3, r2, r3
 800164e:	3304      	adds	r3, #4
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	1dfa      	adds	r2, r7, #7
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	0011      	movs	r1, r2
 8001658:	2203      	movs	r2, #3
 800165a:	400a      	ands	r2, r1
 800165c:	00d2      	lsls	r2, r2, #3
 800165e:	21ff      	movs	r1, #255	@ 0xff
 8001660:	4091      	lsls	r1, r2
 8001662:	000a      	movs	r2, r1
 8001664:	43d2      	mvns	r2, r2
 8001666:	401a      	ands	r2, r3
 8001668:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	019b      	lsls	r3, r3, #6
 800166e:	22ff      	movs	r2, #255	@ 0xff
 8001670:	401a      	ands	r2, r3
 8001672:	1dfb      	adds	r3, r7, #7
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	0018      	movs	r0, r3
 8001678:	2303      	movs	r3, #3
 800167a:	4003      	ands	r3, r0
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001680:	4809      	ldr	r0, [pc, #36]	@ (80016a8 <__NVIC_SetPriority+0xd8>)
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	001c      	movs	r4, r3
 8001688:	230f      	movs	r3, #15
 800168a:	4023      	ands	r3, r4
 800168c:	3b08      	subs	r3, #8
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	430a      	orrs	r2, r1
 8001692:	3306      	adds	r3, #6
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	18c3      	adds	r3, r0, r3
 8001698:	3304      	adds	r3, #4
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	46c0      	nop			@ (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	b003      	add	sp, #12
 80016a2:	bd90      	pop	{r4, r7, pc}
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	1e5a      	subs	r2, r3, #1
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	045b      	lsls	r3, r3, #17
 80016bc:	429a      	cmp	r2, r3
 80016be:	d301      	bcc.n	80016c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c0:	2301      	movs	r3, #1
 80016c2:	e010      	b.n	80016e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c4:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <SysTick_Config+0x44>)
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	3a01      	subs	r2, #1
 80016ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016cc:	2301      	movs	r3, #1
 80016ce:	425b      	negs	r3, r3
 80016d0:	2103      	movs	r1, #3
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff ff7c 	bl	80015d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <SysTick_Config+0x44>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <SysTick_Config+0x44>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b002      	add	sp, #8
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	210f      	movs	r1, #15
 8001700:	187b      	adds	r3, r7, r1
 8001702:	1c02      	adds	r2, r0, #0
 8001704:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	187b      	adds	r3, r7, r1
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b25b      	sxtb	r3, r3
 800170e:	0011      	movs	r1, r2
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff ff5d 	bl	80015d0 <__NVIC_SetPriority>
}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b004      	add	sp, #16
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	0002      	movs	r2, r0
 8001726:	1dfb      	adds	r3, r7, #7
 8001728:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b25b      	sxtb	r3, r3
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff ff33 	bl	800159c <__NVIC_EnableIRQ>
}
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	0018      	movs	r0, r3
 800174a:	f7ff ffaf 	bl	80016ac <SysTick_Config>
 800174e:	0003      	movs	r3, r0
}
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	b002      	add	sp, #8
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001766:	e153      	b.n	8001a10 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4091      	lsls	r1, r2
 8001772:	000a      	movs	r2, r1
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d100      	bne.n	8001780 <HAL_GPIO_Init+0x28>
 800177e:	e144      	b.n	8001a0a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x38>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b12      	cmp	r3, #18
 800178e:	d125      	bne.n	80017dc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	08da      	lsrs	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3208      	adds	r2, #8
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	58d3      	ldr	r3, [r2, r3]
 800179c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2207      	movs	r2, #7
 80017a2:	4013      	ands	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	409a      	lsls	r2, r3
 80017aa:	0013      	movs	r3, r2
 80017ac:	43da      	mvns	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	4013      	ands	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	220f      	movs	r2, #15
 80017ba:	401a      	ands	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2107      	movs	r1, #7
 80017c0:	400b      	ands	r3, r1
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	409a      	lsls	r2, r3
 80017c6:	0013      	movs	r3, r2
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	6979      	ldr	r1, [r7, #20]
 80017da:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	409a      	lsls	r2, r3
 80017ea:	0013      	movs	r3, r2
 80017ec:	43da      	mvns	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	4013      	ands	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2203      	movs	r2, #3
 80017fa:	401a      	ands	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	409a      	lsls	r2, r3
 8001802:	0013      	movs	r3, r2
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	4313      	orrs	r3, r2
 8001808:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d00b      	beq.n	8001830 <HAL_GPIO_Init+0xd8>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d007      	beq.n	8001830 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001824:	2b11      	cmp	r3, #17
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b12      	cmp	r3, #18
 800182e:	d130      	bne.n	8001892 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	409a      	lsls	r2, r3
 800183e:	0013      	movs	r3, r2
 8001840:	43da      	mvns	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4013      	ands	r3, r2
 8001846:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	409a      	lsls	r2, r3
 8001852:	0013      	movs	r3, r2
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	4313      	orrs	r3, r2
 8001858:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001866:	2201      	movs	r2, #1
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	409a      	lsls	r2, r3
 800186c:	0013      	movs	r3, r2
 800186e:	43da      	mvns	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	4013      	ands	r3, r2
 8001874:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	2201      	movs	r2, #1
 800187e:	401a      	ands	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	409a      	lsls	r2, r3
 8001884:	0013      	movs	r3, r2
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4313      	orrs	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d017      	beq.n	80018ca <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	2203      	movs	r2, #3
 80018a6:	409a      	lsls	r2, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	43da      	mvns	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	4013      	ands	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	409a      	lsls	r2, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	2380      	movs	r3, #128	@ 0x80
 80018d0:	055b      	lsls	r3, r3, #21
 80018d2:	4013      	ands	r3, r2
 80018d4:	d100      	bne.n	80018d8 <HAL_GPIO_Init+0x180>
 80018d6:	e098      	b.n	8001a0a <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80018d8:	4a53      	ldr	r2, [pc, #332]	@ (8001a28 <HAL_GPIO_Init+0x2d0>)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3318      	adds	r3, #24
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	589b      	ldr	r3, [r3, r2]
 80018e4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	2203      	movs	r2, #3
 80018ea:	4013      	ands	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	220f      	movs	r2, #15
 80018f0:	409a      	lsls	r2, r3
 80018f2:	0013      	movs	r3, r2
 80018f4:	43da      	mvns	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	4013      	ands	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	23a0      	movs	r3, #160	@ 0xa0
 8001900:	05db      	lsls	r3, r3, #23
 8001902:	429a      	cmp	r2, r3
 8001904:	d019      	beq.n	800193a <HAL_GPIO_Init+0x1e2>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a48      	ldr	r2, [pc, #288]	@ (8001a2c <HAL_GPIO_Init+0x2d4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0x1de>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a47      	ldr	r2, [pc, #284]	@ (8001a30 <HAL_GPIO_Init+0x2d8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00d      	beq.n	8001932 <HAL_GPIO_Init+0x1da>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a46      	ldr	r2, [pc, #280]	@ (8001a34 <HAL_GPIO_Init+0x2dc>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0x1d6>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a45      	ldr	r2, [pc, #276]	@ (8001a38 <HAL_GPIO_Init+0x2e0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_GPIO_Init+0x1d2>
 8001926:	2305      	movs	r3, #5
 8001928:	e008      	b.n	800193c <HAL_GPIO_Init+0x1e4>
 800192a:	2306      	movs	r3, #6
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x1e4>
 800192e:	2303      	movs	r3, #3
 8001930:	e004      	b.n	800193c <HAL_GPIO_Init+0x1e4>
 8001932:	2302      	movs	r3, #2
 8001934:	e002      	b.n	800193c <HAL_GPIO_Init+0x1e4>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x1e4>
 800193a:	2300      	movs	r3, #0
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	2103      	movs	r1, #3
 8001940:	400a      	ands	r2, r1
 8001942:	00d2      	lsls	r2, r2, #3
 8001944:	4093      	lsls	r3, r2
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4313      	orrs	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800194c:	4936      	ldr	r1, [pc, #216]	@ (8001a28 <HAL_GPIO_Init+0x2d0>)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3318      	adds	r3, #24
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800195a:	4a33      	ldr	r2, [pc, #204]	@ (8001a28 <HAL_GPIO_Init+0x2d0>)
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	58d3      	ldr	r3, [r2, r3]
 8001960:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	43da      	mvns	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	4013      	ands	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	2380      	movs	r3, #128	@ 0x80
 8001972:	025b      	lsls	r3, r3, #9
 8001974:	4013      	ands	r3, r2
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001980:	4929      	ldr	r1, [pc, #164]	@ (8001a28 <HAL_GPIO_Init+0x2d0>)
 8001982:	2280      	movs	r2, #128	@ 0x80
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001988:	4a27      	ldr	r2, [pc, #156]	@ (8001a28 <HAL_GPIO_Init+0x2d0>)
 800198a:	2384      	movs	r3, #132	@ 0x84
 800198c:	58d3      	ldr	r3, [r2, r3]
 800198e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43da      	mvns	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	4013      	ands	r3, r2
 8001998:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	2380      	movs	r3, #128	@ 0x80
 80019a0:	029b      	lsls	r3, r3, #10
 80019a2:	4013      	ands	r3, r2
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80019ae:	491e      	ldr	r1, [pc, #120]	@ (8001a28 <HAL_GPIO_Init+0x2d0>)
 80019b0:	2284      	movs	r2, #132	@ 0x84
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80019b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a28 <HAL_GPIO_Init+0x2d0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43da      	mvns	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	4013      	ands	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	2380      	movs	r3, #128	@ 0x80
 80019cc:	035b      	lsls	r3, r3, #13
 80019ce:	4013      	ands	r3, r2
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80019da:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <HAL_GPIO_Init+0x2d0>)
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_GPIO_Init+0x2d0>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	43da      	mvns	r2, r3
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	4013      	ands	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	039b      	lsls	r3, r3, #14
 80019f8:	4013      	ands	r3, r2
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001a04:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <HAL_GPIO_Init+0x2d0>)
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	40da      	lsrs	r2, r3
 8001a18:	1e13      	subs	r3, r2, #0
 8001a1a:	d000      	beq.n	8001a1e <HAL_GPIO_Init+0x2c6>
 8001a1c:	e6a4      	b.n	8001768 <HAL_GPIO_Init+0x10>
  }
}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	46c0      	nop			@ (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b006      	add	sp, #24
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021800 	.word	0x40021800
 8001a2c:	50000400 	.word	0x50000400
 8001a30:	50000800 	.word	0x50000800
 8001a34:	50000c00 	.word	0x50000c00
 8001a38:	50001400 	.word	0x50001400

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	0008      	movs	r0, r1
 8001a46:	0011      	movs	r1, r2
 8001a48:	1cbb      	adds	r3, r7, #2
 8001a4a:	1c02      	adds	r2, r0, #0
 8001a4c:	801a      	strh	r2, [r3, #0]
 8001a4e:	1c7b      	adds	r3, r7, #1
 8001a50:	1c0a      	adds	r2, r1, #0
 8001a52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a54:	1c7b      	adds	r3, r7, #1
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5c:	1cbb      	adds	r3, r7, #2
 8001a5e:	881a      	ldrh	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a64:	e003      	b.n	8001a6e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a66:	1cbb      	adds	r3, r7, #2
 8001a68:	881a      	ldrh	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b002      	add	sp, #8
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	000a      	movs	r2, r1
 8001a80:	1cbb      	adds	r3, r7, #2
 8001a82:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a8a:	1cbb      	adds	r3, r7, #2
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	4013      	ands	r3, r2
 8001a92:	041a      	lsls	r2, r3, #16
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	1cb9      	adds	r1, r7, #2
 8001a9a:	8809      	ldrh	r1, [r1, #0]
 8001a9c:	400b      	ands	r3, r1
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
}
 8001aa4:	46c0      	nop			@ (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b004      	add	sp, #16
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	1dbb      	adds	r3, r7, #6
 8001ab6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001ab8:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	1dba      	adds	r2, r7, #6
 8001abe:	8812      	ldrh	r2, [r2, #0]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d008      	beq.n	8001ad6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001ac6:	1dba      	adds	r2, r7, #6
 8001ac8:	8812      	ldrh	r2, [r2, #0]
 8001aca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001acc:	1dbb      	adds	r3, r7, #6
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f000 f815 	bl	8001b00 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	1dba      	adds	r2, r7, #6
 8001adc:	8812      	ldrh	r2, [r2, #0]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d008      	beq.n	8001af4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001ae4:	1dba      	adds	r2, r7, #6
 8001ae6:	8812      	ldrh	r2, [r2, #0]
 8001ae8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001aea:	1dbb      	adds	r3, r7, #6
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 f810 	bl	8001b14 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001af4:	46c0      	nop			@ (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021800 	.word	0x40021800

08001b00 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	0002      	movs	r2, r0
 8001b08:	1dbb      	adds	r3, r7, #6
 8001b0a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001b0c:	46c0      	nop			@ (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	1dbb      	adds	r3, r7, #6
 8001b1e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001b20:	46c0      	nop			@ (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b002      	add	sp, #8
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e1d0      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4013      	ands	r3, r2
 8001b42:	d100      	bne.n	8001b46 <HAL_RCC_OscConfig+0x1e>
 8001b44:	e069      	b.n	8001c1a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b46:	4bc8      	ldr	r3, [pc, #800]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2238      	movs	r2, #56	@ 0x38
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d105      	bne.n	8001b62 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d15d      	bne.n	8001c1a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e1bc      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	025b      	lsls	r3, r3, #9
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_OscConfig+0x56>
 8001b6e:	4bbe      	ldr	r3, [pc, #760]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4bbd      	ldr	r3, [pc, #756]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001b74:	2180      	movs	r1, #128	@ 0x80
 8001b76:	0249      	lsls	r1, r1, #9
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e020      	b.n	8001bc0 <HAL_RCC_OscConfig+0x98>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	23a0      	movs	r3, #160	@ 0xa0
 8001b84:	02db      	lsls	r3, r3, #11
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d10e      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x80>
 8001b8a:	4bb7      	ldr	r3, [pc, #732]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4bb6      	ldr	r3, [pc, #728]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001b90:	2180      	movs	r1, #128	@ 0x80
 8001b92:	02c9      	lsls	r1, r1, #11
 8001b94:	430a      	orrs	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	4bb3      	ldr	r3, [pc, #716]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4bb2      	ldr	r3, [pc, #712]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001b9e:	2180      	movs	r1, #128	@ 0x80
 8001ba0:	0249      	lsls	r1, r1, #9
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x98>
 8001ba8:	4baf      	ldr	r3, [pc, #700]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4bae      	ldr	r3, [pc, #696]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001bae:	49af      	ldr	r1, [pc, #700]	@ (8001e6c <HAL_RCC_OscConfig+0x344>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	4bac      	ldr	r3, [pc, #688]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4bab      	ldr	r3, [pc, #684]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001bba:	49ad      	ldr	r1, [pc, #692]	@ (8001e70 <HAL_RCC_OscConfig+0x348>)
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d014      	beq.n	8001bf2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7fe fea2 	bl	8000910 <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001bd2:	f7fe fe9d 	bl	8000910 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b64      	cmp	r3, #100	@ 0x64
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e17b      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be4:	4ba0      	ldr	r3, [pc, #640]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	029b      	lsls	r3, r3, #10
 8001bec:	4013      	ands	r3, r2
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0xaa>
 8001bf0:	e013      	b.n	8001c1a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7fe fe8d 	bl	8000910 <HAL_GetTick>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001bfc:	f7fe fe88 	bl	8000910 <HAL_GetTick>
 8001c00:	0002      	movs	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	@ 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e166      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c0e:	4b96      	ldr	r3, [pc, #600]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	029b      	lsls	r3, r3, #10
 8001c16:	4013      	ands	r3, r2
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	4013      	ands	r3, r2
 8001c22:	d100      	bne.n	8001c26 <HAL_RCC_OscConfig+0xfe>
 8001c24:	e086      	b.n	8001d34 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c26:	4b90      	ldr	r3, [pc, #576]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2238      	movs	r2, #56	@ 0x38
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d12f      	bne.n	8001c96 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e14c      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c42:	4b89      	ldr	r3, [pc, #548]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4a8b      	ldr	r2, [pc, #556]	@ (8001e74 <HAL_RCC_OscConfig+0x34c>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	021a      	lsls	r2, r3, #8
 8001c52:	4b85      	ldr	r3, [pc, #532]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001c54:	430a      	orrs	r2, r1
 8001c56:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d112      	bne.n	8001c84 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c5e:	4b82      	ldr	r3, [pc, #520]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a85      	ldr	r2, [pc, #532]	@ (8001e78 <HAL_RCC_OscConfig+0x350>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c72:	4b7d      	ldr	r3, [pc, #500]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	0adb      	lsrs	r3, r3, #11
 8001c78:	2207      	movs	r2, #7
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e7c <HAL_RCC_OscConfig+0x354>)
 8001c7e:	40da      	lsrs	r2, r3
 8001c80:	4b7f      	ldr	r3, [pc, #508]	@ (8001e80 <HAL_RCC_OscConfig+0x358>)
 8001c82:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c84:	4b7f      	ldr	r3, [pc, #508]	@ (8001e84 <HAL_RCC_OscConfig+0x35c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7fe fde5 	bl	8000858 <HAL_InitTick>
 8001c8e:	1e03      	subs	r3, r0, #0
 8001c90:	d050      	beq.n	8001d34 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e122      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d030      	beq.n	8001d00 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c9e:	4b72      	ldr	r3, [pc, #456]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a75      	ldr	r2, [pc, #468]	@ (8001e78 <HAL_RCC_OscConfig+0x350>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	4b6e      	ldr	r3, [pc, #440]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4b6c      	ldr	r3, [pc, #432]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001cb8:	2180      	movs	r1, #128	@ 0x80
 8001cba:	0049      	lsls	r1, r1, #1
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7fe fe26 	bl	8000910 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001cca:	f7fe fe21 	bl	8000910 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e0ff      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cdc:	4b62      	ldr	r3, [pc, #392]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b5f      	ldr	r3, [pc, #380]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4a61      	ldr	r2, [pc, #388]	@ (8001e74 <HAL_RCC_OscConfig+0x34c>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	021a      	lsls	r2, r3, #8
 8001cf8:	4b5b      	ldr	r3, [pc, #364]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	e019      	b.n	8001d34 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001d00:	4b59      	ldr	r3, [pc, #356]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b58      	ldr	r3, [pc, #352]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001d06:	4960      	ldr	r1, [pc, #384]	@ (8001e88 <HAL_RCC_OscConfig+0x360>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7fe fe00 	bl	8000910 <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d16:	f7fe fdfb 	bl	8000910 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0d9      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d28:	4b4f      	ldr	r3, [pc, #316]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4013      	ands	r3, r2
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2208      	movs	r2, #8
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d042      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2238      	movs	r2, #56	@ 0x38
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b18      	cmp	r3, #24
 8001d48:	d105      	bne.n	8001d56 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d138      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0c2      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d019      	beq.n	8001d92 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001d5e:	4b42      	ldr	r3, [pc, #264]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001d60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d62:	4b41      	ldr	r3, [pc, #260]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001d64:	2101      	movs	r1, #1
 8001d66:	430a      	orrs	r2, r1
 8001d68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7fe fdd1 	bl	8000910 <HAL_GetTick>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001d74:	f7fe fdcc 	bl	8000910 <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0aa      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001d86:	4b38      	ldr	r3, [pc, #224]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d0f1      	beq.n	8001d74 <HAL_RCC_OscConfig+0x24c>
 8001d90:	e018      	b.n	8001dc4 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001d92:	4b35      	ldr	r3, [pc, #212]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001d94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d96:	4b34      	ldr	r3, [pc, #208]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001d98:	2101      	movs	r1, #1
 8001d9a:	438a      	bics	r2, r1
 8001d9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7fe fdb7 	bl	8000910 <HAL_GetTick>
 8001da2:	0003      	movs	r3, r0
 8001da4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001da8:	f7fe fdb2 	bl	8000910 <HAL_GetTick>
 8001dac:	0002      	movs	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e090      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001dba:	4b2b      	ldr	r3, [pc, #172]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d1f1      	bne.n	8001da8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2204      	movs	r2, #4
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d100      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2a8>
 8001dce:	e084      	b.n	8001eda <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001dd8:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2238      	movs	r2, #56	@ 0x38
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d000      	beq.n	8001dee <HAL_RCC_OscConfig+0x2c6>
 8001dec:	e075      	b.n	8001eda <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e074      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d106      	bne.n	8001e08 <HAL_RCC_OscConfig+0x2e0>
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001dfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001e00:	2101      	movs	r1, #1
 8001e02:	430a      	orrs	r2, r1
 8001e04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e06:	e01c      	b.n	8001e42 <HAL_RCC_OscConfig+0x31a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d10c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x302>
 8001e10:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001e12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e14:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001e16:	2104      	movs	r1, #4
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e1c:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001e1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e20:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001e22:	2101      	movs	r1, #1
 8001e24:	430a      	orrs	r2, r1
 8001e26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e28:	e00b      	b.n	8001e42 <HAL_RCC_OscConfig+0x31a>
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001e2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	438a      	bics	r2, r1
 8001e34:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e36:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001e38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_RCC_OscConfig+0x340>)
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	438a      	bics	r2, r1
 8001e40:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d028      	beq.n	8001e9c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7fe fd61 	bl	8000910 <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001e52:	e01d      	b.n	8001e90 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e54:	f7fe fd5c 	bl	8000910 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e8c <HAL_RCC_OscConfig+0x364>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d915      	bls.n	8001e90 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e039      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	fffeffff 	.word	0xfffeffff
 8001e70:	fffbffff 	.word	0xfffbffff
 8001e74:	ffff80ff 	.word	0xffff80ff
 8001e78:	ffffc7ff 	.word	0xffffc7ff
 8001e7c:	02dc6c00 	.word	0x02dc6c00
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000004 	.word	0x20000004
 8001e88:	fffffeff 	.word	0xfffffeff
 8001e8c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001e90:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <HAL_RCC_OscConfig+0x3bc>)
 8001e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e94:	2202      	movs	r2, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d0dc      	beq.n	8001e54 <HAL_RCC_OscConfig+0x32c>
 8001e9a:	e013      	b.n	8001ec4 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7fe fd38 	bl	8000910 <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001ea4:	e009      	b.n	8001eba <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7fe fd33 	bl	8000910 <HAL_GetTick>
 8001eaa:	0002      	movs	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee8 <HAL_RCC_OscConfig+0x3c0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e010      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001eba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <HAL_RCC_OscConfig+0x3bc>)
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ec4:	230f      	movs	r3, #15
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d105      	bne.n	8001eda <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ece:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_RCC_OscConfig+0x3bc>)
 8001ed0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ed2:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <HAL_RCC_OscConfig+0x3bc>)
 8001ed4:	4905      	ldr	r1, [pc, #20]	@ (8001eec <HAL_RCC_OscConfig+0x3c4>)
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b006      	add	sp, #24
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	00001388 	.word	0x00001388
 8001eec:	efffffff 	.word	0xefffffff

08001ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0e9      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	4b76      	ldr	r3, [pc, #472]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2207      	movs	r2, #7
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d91e      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b73      	ldr	r3, [pc, #460]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2207      	movs	r2, #7
 8001f18:	4393      	bics	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	4b70      	ldr	r3, [pc, #448]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f24:	f7fe fcf4 	bl	8000910 <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f2c:	e009      	b.n	8001f42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2e:	f7fe fcef 	bl	8000910 <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	4a6a      	ldr	r2, [pc, #424]	@ (80020e4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e0ca      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f42:	4b67      	ldr	r3, [pc, #412]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2207      	movs	r2, #7
 8001f48:	4013      	ands	r3, r2
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1ee      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2202      	movs	r2, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d017      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2204      	movs	r2, #4
 8001f60:	4013      	ands	r3, r2
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f64:	4b60      	ldr	r3, [pc, #384]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a60      	ldr	r2, [pc, #384]	@ (80020ec <HAL_RCC_ClockConfig+0x1fc>)
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	4b5e      	ldr	r3, [pc, #376]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f6e:	21b0      	movs	r1, #176	@ 0xb0
 8001f70:	0109      	lsls	r1, r1, #4
 8001f72:	430a      	orrs	r2, r1
 8001f74:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f76:	4b5c      	ldr	r3, [pc, #368]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	4a5d      	ldr	r2, [pc, #372]	@ (80020f0 <HAL_RCC_ClockConfig+0x200>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	0019      	movs	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	4b58      	ldr	r3, [pc, #352]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f86:	430a      	orrs	r2, r1
 8001f88:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	d055      	beq.n	8002040 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001f94:	4b54      	ldr	r3, [pc, #336]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	221c      	movs	r2, #28
 8001f9a:	4393      	bics	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	4b51      	ldr	r3, [pc, #324]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb0:	4b4d      	ldr	r3, [pc, #308]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	029b      	lsls	r3, r3, #10
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d11f      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e08b      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc8:	4b47      	ldr	r3, [pc, #284]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	@ 0x80
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d113      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e07f      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001fe0:	4b41      	ldr	r3, [pc, #260]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d108      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e074      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001fee:	4b3e      	ldr	r3, [pc, #248]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e06d      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2207      	movs	r2, #7
 8002002:	4393      	bics	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4b37      	ldr	r3, [pc, #220]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 800200c:	430a      	orrs	r2, r1
 800200e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002010:	f7fe fc7e 	bl	8000910 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002018:	e009      	b.n	800202e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800201a:	f7fe fc79 	bl	8000910 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	4a2f      	ldr	r2, [pc, #188]	@ (80020e4 <HAL_RCC_ClockConfig+0x1f4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e054      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	4b2e      	ldr	r3, [pc, #184]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2238      	movs	r2, #56	@ 0x38
 8002034:	401a      	ands	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	429a      	cmp	r2, r3
 800203e:	d1ec      	bne.n	800201a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002040:	4b27      	ldr	r3, [pc, #156]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2207      	movs	r2, #7
 8002046:	4013      	ands	r3, r2
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d21e      	bcs.n	800208c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b24      	ldr	r3, [pc, #144]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2207      	movs	r2, #7
 8002054:	4393      	bics	r3, r2
 8002056:	0019      	movs	r1, r3
 8002058:	4b21      	ldr	r3, [pc, #132]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002060:	f7fe fc56 	bl	8000910 <HAL_GetTick>
 8002064:	0003      	movs	r3, r0
 8002066:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002068:	e009      	b.n	800207e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800206a:	f7fe fc51 	bl	8000910 <HAL_GetTick>
 800206e:	0002      	movs	r2, r0
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	4a1b      	ldr	r2, [pc, #108]	@ (80020e4 <HAL_RCC_ClockConfig+0x1f4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e02c      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800207e:	4b18      	ldr	r3, [pc, #96]	@ (80020e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2207      	movs	r2, #7
 8002084:	4013      	ands	r3, r2
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d1ee      	bne.n	800206a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2204      	movs	r2, #4
 8002092:	4013      	ands	r3, r2
 8002094:	d009      	beq.n	80020aa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002096:	4b14      	ldr	r3, [pc, #80]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	4a16      	ldr	r2, [pc, #88]	@ (80020f4 <HAL_RCC_ClockConfig+0x204>)
 800209c:	4013      	ands	r3, r2
 800209e:	0019      	movs	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020aa:	f000 f82b 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80020ae:	0001      	movs	r1, r0
 80020b0:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <HAL_RCC_ClockConfig+0x1f8>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	220f      	movs	r2, #15
 80020b8:	401a      	ands	r2, r3
 80020ba:	4b0f      	ldr	r3, [pc, #60]	@ (80020f8 <HAL_RCC_ClockConfig+0x208>)
 80020bc:	0092      	lsls	r2, r2, #2
 80020be:	58d3      	ldr	r3, [r2, r3]
 80020c0:	221f      	movs	r2, #31
 80020c2:	4013      	ands	r3, r2
 80020c4:	000a      	movs	r2, r1
 80020c6:	40da      	lsrs	r2, r3
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <HAL_RCC_ClockConfig+0x20c>)
 80020ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <HAL_RCC_ClockConfig+0x210>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7fe fbc1 	bl	8000858 <HAL_InitTick>
 80020d6:	0003      	movs	r3, r0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40022000 	.word	0x40022000
 80020e4:	00001388 	.word	0x00001388
 80020e8:	40021000 	.word	0x40021000
 80020ec:	ffff84ff 	.word	0xffff84ff
 80020f0:	fffff0ff 	.word	0xfffff0ff
 80020f4:	ffff8fff 	.word	0xffff8fff
 80020f8:	08002c14 	.word	0x08002c14
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000004 	.word	0x20000004

08002104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800210a:	4b1c      	ldr	r3, [pc, #112]	@ (800217c <HAL_RCC_GetSysClockFreq+0x78>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2238      	movs	r2, #56	@ 0x38
 8002110:	4013      	ands	r3, r2
 8002112:	d10f      	bne.n	8002134 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002114:	4b19      	ldr	r3, [pc, #100]	@ (800217c <HAL_RCC_GetSysClockFreq+0x78>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0adb      	lsrs	r3, r3, #11
 800211a:	2207      	movs	r2, #7
 800211c:	4013      	ands	r3, r2
 800211e:	2201      	movs	r2, #1
 8002120:	409a      	lsls	r2, r3
 8002122:	0013      	movs	r3, r2
 8002124:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002126:	6839      	ldr	r1, [r7, #0]
 8002128:	4815      	ldr	r0, [pc, #84]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x7c>)
 800212a:	f7fd ffed 	bl	8000108 <__udivsi3>
 800212e:	0003      	movs	r3, r0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	e01e      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002134:	4b11      	ldr	r3, [pc, #68]	@ (800217c <HAL_RCC_GetSysClockFreq+0x78>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2238      	movs	r2, #56	@ 0x38
 800213a:	4013      	ands	r3, r2
 800213c:	2b08      	cmp	r3, #8
 800213e:	d102      	bne.n	8002146 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002140:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x80>)
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	e015      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002146:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <HAL_RCC_GetSysClockFreq+0x78>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2238      	movs	r2, #56	@ 0x38
 800214c:	4013      	ands	r3, r2
 800214e:	2b20      	cmp	r3, #32
 8002150:	d103      	bne.n	800215a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002152:	2380      	movs	r3, #128	@ 0x80
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	e00b      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800215a:	4b08      	ldr	r3, [pc, #32]	@ (800217c <HAL_RCC_GetSysClockFreq+0x78>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2238      	movs	r2, #56	@ 0x38
 8002160:	4013      	ands	r3, r2
 8002162:	2b18      	cmp	r3, #24
 8002164:	d103      	bne.n	800216e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002166:	23fa      	movs	r3, #250	@ 0xfa
 8002168:	01db      	lsls	r3, r3, #7
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	e001      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002172:	687b      	ldr	r3, [r7, #4]
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	b002      	add	sp, #8
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	02dc6c00 	.word	0x02dc6c00
 8002184:	007a1200 	.word	0x007a1200

08002188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002190:	2313      	movs	r3, #19
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002198:	2312      	movs	r3, #18
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	029b      	lsls	r3, r3, #10
 80021a8:	4013      	ands	r3, r2
 80021aa:	d100      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80021ac:	e079      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2011      	movs	r0, #17
 80021b0:	183b      	adds	r3, r7, r0
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b6:	4b64      	ldr	r3, [pc, #400]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	055b      	lsls	r3, r3, #21
 80021be:	4013      	ands	r3, r2
 80021c0:	d110      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4b61      	ldr	r3, [pc, #388]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021c6:	4b60      	ldr	r3, [pc, #384]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021c8:	2180      	movs	r1, #128	@ 0x80
 80021ca:	0549      	lsls	r1, r1, #21
 80021cc:	430a      	orrs	r2, r1
 80021ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	055b      	lsls	r3, r3, #21
 80021d8:	4013      	ands	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021de:	183b      	adds	r3, r7, r0
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80021e4:	4b58      	ldr	r3, [pc, #352]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021e8:	23c0      	movs	r3, #192	@ 0xc0
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4013      	ands	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d019      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d014      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002200:	4b51      	ldr	r3, [pc, #324]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002204:	4a51      	ldr	r2, [pc, #324]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002206:	4013      	ands	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800220a:	4b4f      	ldr	r3, [pc, #316]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800220c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800220e:	4b4e      	ldr	r3, [pc, #312]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002210:	2180      	movs	r1, #128	@ 0x80
 8002212:	0249      	lsls	r1, r1, #9
 8002214:	430a      	orrs	r2, r1
 8002216:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002218:	4b4b      	ldr	r3, [pc, #300]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800221a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800221c:	4b4a      	ldr	r3, [pc, #296]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800221e:	494c      	ldr	r1, [pc, #304]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002220:	400a      	ands	r2, r1
 8002222:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002224:	4b48      	ldr	r3, [pc, #288]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2201      	movs	r2, #1
 800222e:	4013      	ands	r3, r2
 8002230:	d016      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7fe fb6d 	bl	8000910 <HAL_GetTick>
 8002236:	0003      	movs	r3, r0
 8002238:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800223a:	e00c      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7fe fb68 	bl	8000910 <HAL_GetTick>
 8002240:	0002      	movs	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	4a43      	ldr	r2, [pc, #268]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d904      	bls.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 800224c:	2313      	movs	r3, #19
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2203      	movs	r2, #3
 8002252:	701a      	strb	r2, [r3, #0]
          break;
 8002254:	e004      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002256:	4b3c      	ldr	r3, [pc, #240]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225a:	2202      	movs	r2, #2
 800225c:	4013      	ands	r3, r2
 800225e:	d0ed      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002260:	2313      	movs	r3, #19
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10a      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800226a:	4b37      	ldr	r3, [pc, #220]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800226c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226e:	4a37      	ldr	r2, [pc, #220]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002270:	4013      	ands	r3, r2
 8002272:	0019      	movs	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	4b33      	ldr	r3, [pc, #204]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800227a:	430a      	orrs	r2, r1
 800227c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800227e:	e005      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002280:	2312      	movs	r3, #18
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2213      	movs	r2, #19
 8002286:	18ba      	adds	r2, r7, r2
 8002288:	7812      	ldrb	r2, [r2, #0]
 800228a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800228c:	2311      	movs	r3, #17
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d105      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002296:	4b2c      	ldr	r3, [pc, #176]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002298:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800229a:	4b2b      	ldr	r3, [pc, #172]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800229c:	492e      	ldr	r1, [pc, #184]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229e:	400a      	ands	r2, r1
 80022a0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2201      	movs	r2, #1
 80022a8:	4013      	ands	r3, r2
 80022aa:	d009      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ac:	4b26      	ldr	r3, [pc, #152]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b0:	2203      	movs	r2, #3
 80022b2:	4393      	bics	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	4b23      	ldr	r3, [pc, #140]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022bc:	430a      	orrs	r2, r1
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2240      	movs	r2, #64	@ 0x40
 80022c6:	4013      	ands	r3, r2
 80022c8:	d009      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ce:	4a23      	ldr	r2, [pc, #140]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	0019      	movs	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022da:	430a      	orrs	r2, r1
 80022dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	@ 0x80
 80022e4:	01db      	lsls	r3, r3, #7
 80022e6:	4013      	ands	r3, r2
 80022e8:	d008      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022ea:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	0899      	lsrs	r1, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	4b14      	ldr	r3, [pc, #80]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022f8:	430a      	orrs	r2, r1
 80022fa:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	2380      	movs	r3, #128	@ 0x80
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	4013      	ands	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002308:	4b0f      	ldr	r3, [pc, #60]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800230a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230c:	4a14      	ldr	r2, [pc, #80]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002318:	430a      	orrs	r2, r1
 800231a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	da09      	bge.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002324:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	22e0      	movs	r2, #224	@ 0xe0
 800232a:	4393      	bics	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002338:	2312      	movs	r3, #18
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	781b      	ldrb	r3, [r3, #0]
}
 800233e:	0018      	movs	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	b006      	add	sp, #24
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			@ (mov r8, r8)
 8002348:	40021000 	.word	0x40021000
 800234c:	fffffcff 	.word	0xfffffcff
 8002350:	fffeffff 	.word	0xfffeffff
 8002354:	00001388 	.word	0x00001388
 8002358:	efffffff 	.word	0xefffffff
 800235c:	ffffcfff 	.word	0xffffcfff
 8002360:	ffff3fff 	.word	0xffff3fff

08002364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e04a      	b.n	800240c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	223d      	movs	r2, #61	@ 0x3d
 800237a:	5c9b      	ldrb	r3, [r3, r2]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d107      	bne.n	8002392 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	223c      	movs	r2, #60	@ 0x3c
 8002386:	2100      	movs	r1, #0
 8002388:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0018      	movs	r0, r3
 800238e:	f7fe f9b9 	bl	8000704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	223d      	movs	r2, #61	@ 0x3d
 8002396:	2102      	movs	r1, #2
 8002398:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3304      	adds	r3, #4
 80023a2:	0019      	movs	r1, r3
 80023a4:	0010      	movs	r0, r2
 80023a6:	f000 fa7b 	bl	80028a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2248      	movs	r2, #72	@ 0x48
 80023ae:	2101      	movs	r1, #1
 80023b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	223e      	movs	r2, #62	@ 0x3e
 80023b6:	2101      	movs	r1, #1
 80023b8:	5499      	strb	r1, [r3, r2]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	223f      	movs	r2, #63	@ 0x3f
 80023be:	2101      	movs	r1, #1
 80023c0:	5499      	strb	r1, [r3, r2]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2240      	movs	r2, #64	@ 0x40
 80023c6:	2101      	movs	r1, #1
 80023c8:	5499      	strb	r1, [r3, r2]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2241      	movs	r2, #65	@ 0x41
 80023ce:	2101      	movs	r1, #1
 80023d0:	5499      	strb	r1, [r3, r2]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2242      	movs	r2, #66	@ 0x42
 80023d6:	2101      	movs	r1, #1
 80023d8:	5499      	strb	r1, [r3, r2]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2243      	movs	r2, #67	@ 0x43
 80023de:	2101      	movs	r1, #1
 80023e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2244      	movs	r2, #68	@ 0x44
 80023e6:	2101      	movs	r1, #1
 80023e8:	5499      	strb	r1, [r3, r2]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2245      	movs	r2, #69	@ 0x45
 80023ee:	2101      	movs	r1, #1
 80023f0:	5499      	strb	r1, [r3, r2]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2246      	movs	r2, #70	@ 0x46
 80023f6:	2101      	movs	r1, #1
 80023f8:	5499      	strb	r1, [r3, r2]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2247      	movs	r2, #71	@ 0x47
 80023fe:	2101      	movs	r1, #1
 8002400:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	223d      	movs	r2, #61	@ 0x3d
 8002406:	2101      	movs	r1, #1
 8002408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b002      	add	sp, #8
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	223d      	movs	r2, #61	@ 0x3d
 8002420:	5c9b      	ldrb	r3, [r3, r2]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d001      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e037      	b.n	800249c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	223d      	movs	r2, #61	@ 0x3d
 8002430:	2102      	movs	r1, #2
 8002432:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2101      	movs	r1, #1
 8002440:	430a      	orrs	r2, r1
 8002442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a16      	ldr	r2, [pc, #88]	@ (80024a4 <HAL_TIM_Base_Start_IT+0x90>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d004      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x44>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a15      	ldr	r2, [pc, #84]	@ (80024a8 <HAL_TIM_Base_Start_IT+0x94>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d116      	bne.n	8002486 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	4a13      	ldr	r2, [pc, #76]	@ (80024ac <HAL_TIM_Base_Start_IT+0x98>)
 8002460:	4013      	ands	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b06      	cmp	r3, #6
 8002468:	d016      	beq.n	8002498 <HAL_TIM_Base_Start_IT+0x84>
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	025b      	lsls	r3, r3, #9
 8002470:	429a      	cmp	r2, r3
 8002472:	d011      	beq.n	8002498 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2101      	movs	r1, #1
 8002480:	430a      	orrs	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002484:	e008      	b.n	8002498 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2101      	movs	r1, #1
 8002492:	430a      	orrs	r2, r1
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e000      	b.n	800249a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	0018      	movs	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	b004      	add	sp, #16
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40000400 	.word	0x40000400
 80024ac:	00010007 	.word	0x00010007

080024b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2202      	movs	r2, #2
 80024cc:	4013      	ands	r3, r2
 80024ce:	d021      	beq.n	8002514 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2202      	movs	r2, #2
 80024d4:	4013      	ands	r3, r2
 80024d6:	d01d      	beq.n	8002514 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2203      	movs	r2, #3
 80024de:	4252      	negs	r2, r2
 80024e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2203      	movs	r2, #3
 80024f0:	4013      	ands	r3, r2
 80024f2:	d004      	beq.n	80024fe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	0018      	movs	r0, r3
 80024f8:	f000 f9ba 	bl	8002870 <HAL_TIM_IC_CaptureCallback>
 80024fc:	e007      	b.n	800250e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	0018      	movs	r0, r3
 8002502:	f000 f9ad 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 f9b9 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2204      	movs	r2, #4
 8002518:	4013      	ands	r3, r2
 800251a:	d022      	beq.n	8002562 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2204      	movs	r2, #4
 8002520:	4013      	ands	r3, r2
 8002522:	d01e      	beq.n	8002562 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2205      	movs	r2, #5
 800252a:	4252      	negs	r2, r2
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	23c0      	movs	r3, #192	@ 0xc0
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4013      	ands	r3, r2
 8002540:	d004      	beq.n	800254c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	0018      	movs	r0, r3
 8002546:	f000 f993 	bl	8002870 <HAL_TIM_IC_CaptureCallback>
 800254a:	e007      	b.n	800255c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	0018      	movs	r0, r3
 8002550:	f000 f986 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	0018      	movs	r0, r3
 8002558:	f000 f992 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2208      	movs	r2, #8
 8002566:	4013      	ands	r3, r2
 8002568:	d021      	beq.n	80025ae <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2208      	movs	r2, #8
 800256e:	4013      	ands	r3, r2
 8002570:	d01d      	beq.n	80025ae <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2209      	movs	r2, #9
 8002578:	4252      	negs	r2, r2
 800257a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2204      	movs	r2, #4
 8002580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2203      	movs	r2, #3
 800258a:	4013      	ands	r3, r2
 800258c:	d004      	beq.n	8002598 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	0018      	movs	r0, r3
 8002592:	f000 f96d 	bl	8002870 <HAL_TIM_IC_CaptureCallback>
 8002596:	e007      	b.n	80025a8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	0018      	movs	r0, r3
 800259c:	f000 f960 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 f96c 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2210      	movs	r2, #16
 80025b2:	4013      	ands	r3, r2
 80025b4:	d022      	beq.n	80025fc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2210      	movs	r2, #16
 80025ba:	4013      	ands	r3, r2
 80025bc:	d01e      	beq.n	80025fc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2211      	movs	r2, #17
 80025c4:	4252      	negs	r2, r2
 80025c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2208      	movs	r2, #8
 80025cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	23c0      	movs	r3, #192	@ 0xc0
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4013      	ands	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	0018      	movs	r0, r3
 80025e0:	f000 f946 	bl	8002870 <HAL_TIM_IC_CaptureCallback>
 80025e4:	e007      	b.n	80025f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 f939 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	0018      	movs	r0, r3
 80025f2:	f000 f945 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2201      	movs	r2, #1
 8002600:	4013      	ands	r3, r2
 8002602:	d00c      	beq.n	800261e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	4013      	ands	r3, r2
 800260a:	d008      	beq.n	800261e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2202      	movs	r2, #2
 8002612:	4252      	negs	r2, r2
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	0018      	movs	r0, r3
 800261a:	f7fd ffbd 	bl	8000598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2280      	movs	r2, #128	@ 0x80
 8002622:	4013      	ands	r3, r2
 8002624:	d00c      	beq.n	8002640 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2280      	movs	r2, #128	@ 0x80
 800262a:	4013      	ands	r3, r2
 800262c:	d008      	beq.n	8002640 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2281      	movs	r2, #129	@ 0x81
 8002634:	4252      	negs	r2, r2
 8002636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	0018      	movs	r0, r3
 800263c:	f000 faa2 	bl	8002b84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4013      	ands	r3, r2
 8002648:	d00b      	beq.n	8002662 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2280      	movs	r2, #128	@ 0x80
 800264e:	4013      	ands	r3, r2
 8002650:	d007      	beq.n	8002662 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a16      	ldr	r2, [pc, #88]	@ (80026b0 <HAL_TIM_IRQHandler+0x200>)
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f000 fa99 	bl	8002b94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2240      	movs	r2, #64	@ 0x40
 8002666:	4013      	ands	r3, r2
 8002668:	d00c      	beq.n	8002684 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2240      	movs	r2, #64	@ 0x40
 800266e:	4013      	ands	r3, r2
 8002670:	d008      	beq.n	8002684 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2241      	movs	r2, #65	@ 0x41
 8002678:	4252      	negs	r2, r2
 800267a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	0018      	movs	r0, r3
 8002680:	f000 f906 	bl	8002890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2220      	movs	r2, #32
 8002688:	4013      	ands	r3, r2
 800268a:	d00c      	beq.n	80026a6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	4013      	ands	r3, r2
 8002692:	d008      	beq.n	80026a6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2221      	movs	r2, #33	@ 0x21
 800269a:	4252      	negs	r2, r2
 800269c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 fa67 	bl	8002b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026a6:	46c0      	nop			@ (mov r8, r8)
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b004      	add	sp, #16
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	fffffeff 	.word	0xfffffeff

080026b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026be:	230f      	movs	r3, #15
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	223c      	movs	r2, #60	@ 0x3c
 80026ca:	5c9b      	ldrb	r3, [r3, r2]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_TIM_ConfigClockSource+0x20>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e0bc      	b.n	800284e <HAL_TIM_ConfigClockSource+0x19a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	223c      	movs	r2, #60	@ 0x3c
 80026d8:	2101      	movs	r1, #1
 80026da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	223d      	movs	r2, #61	@ 0x3d
 80026e0:	2102      	movs	r1, #2
 80026e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4a5a      	ldr	r2, [pc, #360]	@ (8002858 <HAL_TIM_ConfigClockSource+0x1a4>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4a59      	ldr	r2, [pc, #356]	@ (800285c <HAL_TIM_ConfigClockSource+0x1a8>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2280      	movs	r2, #128	@ 0x80
 800270a:	0192      	lsls	r2, r2, #6
 800270c:	4293      	cmp	r3, r2
 800270e:	d040      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0xde>
 8002710:	2280      	movs	r2, #128	@ 0x80
 8002712:	0192      	lsls	r2, r2, #6
 8002714:	4293      	cmp	r3, r2
 8002716:	d900      	bls.n	800271a <HAL_TIM_ConfigClockSource+0x66>
 8002718:	e088      	b.n	800282c <HAL_TIM_ConfigClockSource+0x178>
 800271a:	2280      	movs	r2, #128	@ 0x80
 800271c:	0152      	lsls	r2, r2, #5
 800271e:	4293      	cmp	r3, r2
 8002720:	d100      	bne.n	8002724 <HAL_TIM_ConfigClockSource+0x70>
 8002722:	e088      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x182>
 8002724:	2280      	movs	r2, #128	@ 0x80
 8002726:	0152      	lsls	r2, r2, #5
 8002728:	4293      	cmp	r3, r2
 800272a:	d900      	bls.n	800272e <HAL_TIM_ConfigClockSource+0x7a>
 800272c:	e07e      	b.n	800282c <HAL_TIM_ConfigClockSource+0x178>
 800272e:	2b70      	cmp	r3, #112	@ 0x70
 8002730:	d018      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0xb0>
 8002732:	d900      	bls.n	8002736 <HAL_TIM_ConfigClockSource+0x82>
 8002734:	e07a      	b.n	800282c <HAL_TIM_ConfigClockSource+0x178>
 8002736:	2b60      	cmp	r3, #96	@ 0x60
 8002738:	d04f      	beq.n	80027da <HAL_TIM_ConfigClockSource+0x126>
 800273a:	d900      	bls.n	800273e <HAL_TIM_ConfigClockSource+0x8a>
 800273c:	e076      	b.n	800282c <HAL_TIM_ConfigClockSource+0x178>
 800273e:	2b50      	cmp	r3, #80	@ 0x50
 8002740:	d03b      	beq.n	80027ba <HAL_TIM_ConfigClockSource+0x106>
 8002742:	d900      	bls.n	8002746 <HAL_TIM_ConfigClockSource+0x92>
 8002744:	e072      	b.n	800282c <HAL_TIM_ConfigClockSource+0x178>
 8002746:	2b40      	cmp	r3, #64	@ 0x40
 8002748:	d057      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x146>
 800274a:	d900      	bls.n	800274e <HAL_TIM_ConfigClockSource+0x9a>
 800274c:	e06e      	b.n	800282c <HAL_TIM_ConfigClockSource+0x178>
 800274e:	2b30      	cmp	r3, #48	@ 0x30
 8002750:	d063      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x166>
 8002752:	d86b      	bhi.n	800282c <HAL_TIM_ConfigClockSource+0x178>
 8002754:	2b20      	cmp	r3, #32
 8002756:	d060      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x166>
 8002758:	d868      	bhi.n	800282c <HAL_TIM_ConfigClockSource+0x178>
 800275a:	2b00      	cmp	r3, #0
 800275c:	d05d      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x166>
 800275e:	2b10      	cmp	r3, #16
 8002760:	d05b      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x166>
 8002762:	e063      	b.n	800282c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002774:	f000 f97c 	bl	8002a70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2277      	movs	r2, #119	@ 0x77
 8002784:	4313      	orrs	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	609a      	str	r2, [r3, #8]
      break;
 8002790:	e052      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027a2:	f000 f965 	bl	8002a70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2180      	movs	r1, #128	@ 0x80
 80027b2:	01c9      	lsls	r1, r1, #7
 80027b4:	430a      	orrs	r2, r1
 80027b6:	609a      	str	r2, [r3, #8]
      break;
 80027b8:	e03e      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c6:	001a      	movs	r2, r3
 80027c8:	f000 f8d6 	bl	8002978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2150      	movs	r1, #80	@ 0x50
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 f930 	bl	8002a38 <TIM_ITRx_SetConfig>
      break;
 80027d8:	e02e      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027e6:	001a      	movs	r2, r3
 80027e8:	f000 f8f4 	bl	80029d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2160      	movs	r1, #96	@ 0x60
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 f920 	bl	8002a38 <TIM_ITRx_SetConfig>
      break;
 80027f8:	e01e      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002806:	001a      	movs	r2, r3
 8002808:	f000 f8b6 	bl	8002978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2140      	movs	r1, #64	@ 0x40
 8002812:	0018      	movs	r0, r3
 8002814:	f000 f910 	bl	8002a38 <TIM_ITRx_SetConfig>
      break;
 8002818:	e00e      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	0019      	movs	r1, r3
 8002824:	0010      	movs	r0, r2
 8002826:	f000 f907 	bl	8002a38 <TIM_ITRx_SetConfig>
      break;
 800282a:	e005      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800282c:	230f      	movs	r3, #15
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
      break;
 8002834:	e000      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002836:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	223d      	movs	r2, #61	@ 0x3d
 800283c:	2101      	movs	r1, #1
 800283e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	223c      	movs	r2, #60	@ 0x3c
 8002844:	2100      	movs	r1, #0
 8002846:	5499      	strb	r1, [r3, r2]

  return status;
 8002848:	230f      	movs	r3, #15
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	781b      	ldrb	r3, [r3, #0]
}
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b004      	add	sp, #16
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	ffceff88 	.word	0xffceff88
 800285c:	ffff00ff 	.word	0xffff00ff

08002860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002868:	46c0      	nop			@ (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002878:	46c0      	nop			@ (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b002      	add	sp, #8
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002888:	46c0      	nop			@ (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b002      	add	sp, #8
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002898:	46c0      	nop			@ (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}

080028a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002960 <TIM_Base_SetConfig+0xc0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d003      	beq.n	80028c0 <TIM_Base_SetConfig+0x20>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002964 <TIM_Base_SetConfig+0xc4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d108      	bne.n	80028d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2270      	movs	r2, #112	@ 0x70
 80028c4:	4393      	bics	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a22      	ldr	r2, [pc, #136]	@ (8002960 <TIM_Base_SetConfig+0xc0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00f      	beq.n	80028fa <TIM_Base_SetConfig+0x5a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a21      	ldr	r2, [pc, #132]	@ (8002964 <TIM_Base_SetConfig+0xc4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00b      	beq.n	80028fa <TIM_Base_SetConfig+0x5a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a20      	ldr	r2, [pc, #128]	@ (8002968 <TIM_Base_SetConfig+0xc8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <TIM_Base_SetConfig+0x5a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a1f      	ldr	r2, [pc, #124]	@ (800296c <TIM_Base_SetConfig+0xcc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d003      	beq.n	80028fa <TIM_Base_SetConfig+0x5a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002970 <TIM_Base_SetConfig+0xd0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d108      	bne.n	800290c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002974 <TIM_Base_SetConfig+0xd4>)
 80028fe:	4013      	ands	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2280      	movs	r2, #128	@ 0x80
 8002910:	4393      	bics	r3, r2
 8002912:	001a      	movs	r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a0a      	ldr	r2, [pc, #40]	@ (8002960 <TIM_Base_SetConfig+0xc0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <TIM_Base_SetConfig+0xaa>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a0b      	ldr	r2, [pc, #44]	@ (800296c <TIM_Base_SetConfig+0xcc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d003      	beq.n	800294a <TIM_Base_SetConfig+0xaa>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <TIM_Base_SetConfig+0xd0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d103      	bne.n	8002952 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	615a      	str	r2, [r3, #20]
}
 8002958:	46c0      	nop			@ (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b004      	add	sp, #16
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40000400 	.word	0x40000400
 8002968:	40002000 	.word	0x40002000
 800296c:	40014400 	.word	0x40014400
 8002970:	40014800 	.word	0x40014800
 8002974:	fffffcff 	.word	0xfffffcff

08002978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	2201      	movs	r2, #1
 8002990:	4393      	bics	r3, r2
 8002992:	001a      	movs	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	22f0      	movs	r2, #240	@ 0xf0
 80029a2:	4393      	bics	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	220a      	movs	r2, #10
 80029b4:	4393      	bics	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	621a      	str	r2, [r3, #32]
}
 80029cc:	46c0      	nop			@ (mov r8, r8)
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b006      	add	sp, #24
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	2210      	movs	r2, #16
 80029ec:	4393      	bics	r3, r2
 80029ee:	001a      	movs	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a34 <TIM_TI2_ConfigInputStage+0x60>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	031b      	lsls	r3, r3, #12
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	22a0      	movs	r2, #160	@ 0xa0
 8002a10:	4393      	bics	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b006      	add	sp, #24
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	ffff0fff 	.word	0xffff0fff

08002a38 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a08      	ldr	r2, [pc, #32]	@ (8002a6c <TIM_ITRx_SetConfig+0x34>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	2207      	movs	r2, #7
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	609a      	str	r2, [r3, #8]
}
 8002a62:	46c0      	nop			@ (mov r8, r8)
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b004      	add	sp, #16
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	ffcfff8f 	.word	0xffcfff8f

08002a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	4a09      	ldr	r2, [pc, #36]	@ (8002aac <TIM_ETR_SetConfig+0x3c>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	021a      	lsls	r2, r3, #8
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b006      	add	sp, #24
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	ffff00ff 	.word	0xffff00ff

08002ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	223c      	movs	r2, #60	@ 0x3c
 8002abe:	5c9b      	ldrb	r3, [r3, r2]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e04a      	b.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	223c      	movs	r2, #60	@ 0x3c
 8002acc:	2101      	movs	r1, #1
 8002ace:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	223d      	movs	r2, #61	@ 0x3d
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1e      	ldr	r2, [pc, #120]	@ (8002b68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d108      	bne.n	8002b04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2270      	movs	r2, #112	@ 0x70
 8002b08:	4393      	bics	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a11      	ldr	r2, [pc, #68]	@ (8002b68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d004      	beq.n	8002b32 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a10      	ldr	r2, [pc, #64]	@ (8002b70 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d10c      	bne.n	8002b4c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2280      	movs	r2, #128	@ 0x80
 8002b36:	4393      	bics	r3, r2
 8002b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	223d      	movs	r2, #61	@ 0x3d
 8002b50:	2101      	movs	r1, #1
 8002b52:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	223c      	movs	r2, #60	@ 0x3c
 8002b58:	2100      	movs	r1, #0
 8002b5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	0018      	movs	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b004      	add	sp, #16
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	40012c00 	.word	0x40012c00
 8002b6c:	ff0fffff 	.word	0xff0fffff
 8002b70:	40000400 	.word	0x40000400

08002b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b7c:	46c0      	nop			@ (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b002      	add	sp, #8
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b8c:	46c0      	nop			@ (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b9c:	46c0      	nop			@ (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <memset>:
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	1882      	adds	r2, r0, r2
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d100      	bne.n	8002bae <memset+0xa>
 8002bac:	4770      	bx	lr
 8002bae:	7019      	strb	r1, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	e7f9      	b.n	8002ba8 <memset+0x4>

08002bb4 <__libc_init_array>:
 8002bb4:	b570      	push	{r4, r5, r6, lr}
 8002bb6:	2600      	movs	r6, #0
 8002bb8:	4c0c      	ldr	r4, [pc, #48]	@ (8002bec <__libc_init_array+0x38>)
 8002bba:	4d0d      	ldr	r5, [pc, #52]	@ (8002bf0 <__libc_init_array+0x3c>)
 8002bbc:	1b64      	subs	r4, r4, r5
 8002bbe:	10a4      	asrs	r4, r4, #2
 8002bc0:	42a6      	cmp	r6, r4
 8002bc2:	d109      	bne.n	8002bd8 <__libc_init_array+0x24>
 8002bc4:	2600      	movs	r6, #0
 8002bc6:	f000 f819 	bl	8002bfc <_init>
 8002bca:	4c0a      	ldr	r4, [pc, #40]	@ (8002bf4 <__libc_init_array+0x40>)
 8002bcc:	4d0a      	ldr	r5, [pc, #40]	@ (8002bf8 <__libc_init_array+0x44>)
 8002bce:	1b64      	subs	r4, r4, r5
 8002bd0:	10a4      	asrs	r4, r4, #2
 8002bd2:	42a6      	cmp	r6, r4
 8002bd4:	d105      	bne.n	8002be2 <__libc_init_array+0x2e>
 8002bd6:	bd70      	pop	{r4, r5, r6, pc}
 8002bd8:	00b3      	lsls	r3, r6, #2
 8002bda:	58eb      	ldr	r3, [r5, r3]
 8002bdc:	4798      	blx	r3
 8002bde:	3601      	adds	r6, #1
 8002be0:	e7ee      	b.n	8002bc0 <__libc_init_array+0xc>
 8002be2:	00b3      	lsls	r3, r6, #2
 8002be4:	58eb      	ldr	r3, [r5, r3]
 8002be6:	4798      	blx	r3
 8002be8:	3601      	adds	r6, #1
 8002bea:	e7f2      	b.n	8002bd2 <__libc_init_array+0x1e>
 8002bec:	08002c54 	.word	0x08002c54
 8002bf0:	08002c54 	.word	0x08002c54
 8002bf4:	08002c58 	.word	0x08002c58
 8002bf8:	08002c54 	.word	0x08002c54

08002bfc <_init>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	46c0      	nop			@ (mov r8, r8)
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr

08002c08 <_fini>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0e:	bc08      	pop	{r3}
 8002c10:	469e      	mov	lr, r3
 8002c12:	4770      	bx	lr
