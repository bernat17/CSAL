
ETR_CSAL_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027c0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002880  08002880  00003880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c0  080028c0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080028c0  080028c0  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028c0  080028c0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c0  080028c0  000038c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028c4  080028c4  000038c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028c8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  080028d4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  080028d4  000040dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aae1  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b68  00000000  00000000  0000eb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00010680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092a  00000000  00000000  00011258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b53  00000000  00000000  00011b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd55  00000000  00000000  000256d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080c21  00000000  00000000  0003242a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b304b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002afc  00000000  00000000  000b3090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000b5b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002868 	.word	0x08002868

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002868 	.word	0x08002868

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fad5 	bl	80007d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81a 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f91e 	bl	800046c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000230:	f000 f8c6 	bl	80003c0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000234:	f000 f85a 	bl	80002ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000238:	4b07      	ldr	r3, [pc, #28]	@ (8000258 <main+0x38>)
 800023a:	0018      	movs	r0, r3
 800023c:	f001 ff20 	bl	8002080 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000240:	4b06      	ldr	r3, [pc, #24]	@ (800025c <main+0x3c>)
 8000242:	2108      	movs	r1, #8
 8000244:	0018      	movs	r0, r3
 8000246:	f001 fa4c 	bl	80016e2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800024a:	23fa      	movs	r3, #250	@ 0xfa
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fb3c 	bl	80008cc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	e7f3      	b.n	8000240 <main+0x20>
 8000258:	2000008c 	.word	0x2000008c
 800025c:	50000400 	.word	0x50000400

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b08d      	sub	sp, #52	@ 0x34
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2414      	movs	r4, #20
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	231c      	movs	r3, #28
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f002 facd 	bl	8002810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	003b      	movs	r3, r7
 8000278:	0018      	movs	r0, r3
 800027a:	2314      	movs	r3, #20
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f002 fac6 	bl	8002810 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000284:	193b      	adds	r3, r7, r4
 8000286:	2202      	movs	r2, #2
 8000288:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	193b      	adds	r3, r7, r4
 800028c:	2280      	movs	r2, #128	@ 0x80
 800028e:	0052      	lsls	r2, r2, #1
 8000290:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000292:	193b      	adds	r3, r7, r4
 8000294:	2280      	movs	r2, #128	@ 0x80
 8000296:	0152      	lsls	r2, r2, #5
 8000298:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	193b      	adds	r3, r7, r4
 800029c:	2240      	movs	r2, #64	@ 0x40
 800029e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	f001 fa76 	bl	8001794 <HAL_RCC_OscConfig>
 80002a8:	1e03      	subs	r3, r0, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002ac:	f000 f978 	bl	80005a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	003b      	movs	r3, r7
 80002b2:	2207      	movs	r2, #7
 80002b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b6:	003b      	movs	r3, r7
 80002b8:	2200      	movs	r2, #0
 80002ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	003b      	movs	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002c2:	003b      	movs	r3, r7
 80002c4:	2200      	movs	r2, #0
 80002c6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV16;
 80002c8:	003b      	movs	r3, r7
 80002ca:	22e0      	movs	r2, #224	@ 0xe0
 80002cc:	01d2      	lsls	r2, r2, #7
 80002ce:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d0:	003b      	movs	r3, r7
 80002d2:	2100      	movs	r1, #0
 80002d4:	0018      	movs	r0, r3
 80002d6:	f001 fc41 	bl	8001b5c <HAL_RCC_ClockConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002de:	f000 f95f 	bl	80005a0 <Error_Handler>
  }
}
 80002e2:	46c0      	nop			@ (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b00d      	add	sp, #52	@ 0x34
 80002e8:	bd90      	pop	{r4, r7, pc}
	...

080002ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	0018      	movs	r0, r3
 80002f6:	230c      	movs	r3, #12
 80002f8:	001a      	movs	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	f002 fa88 	bl	8002810 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000300:	4b2d      	ldr	r3, [pc, #180]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000302:	4a2e      	ldr	r2, [pc, #184]	@ (80003bc <MX_ADC1_Init+0xd0>)
 8000304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000306:	4b2c      	ldr	r3, [pc, #176]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000308:	22c0      	movs	r2, #192	@ 0xc0
 800030a:	0612      	lsls	r2, r2, #24
 800030c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800030e:	4b2a      	ldr	r3, [pc, #168]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000314:	4b28      	ldr	r3, [pc, #160]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800031a:	4b27      	ldr	r3, [pc, #156]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000320:	4b25      	ldr	r3, [pc, #148]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000322:	2204      	movs	r2, #4
 8000324:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000326:	4b24      	ldr	r3, [pc, #144]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000328:	2200      	movs	r2, #0
 800032a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800032c:	4b22      	ldr	r3, [pc, #136]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 800032e:	2200      	movs	r2, #0
 8000330:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000332:	4b21      	ldr	r3, [pc, #132]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000334:	2200      	movs	r2, #0
 8000336:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000338:	4b1f      	ldr	r3, [pc, #124]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 800033a:	2201      	movs	r2, #1
 800033c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033e:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000340:	2220      	movs	r2, #32
 8000342:	2100      	movs	r1, #0
 8000344:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000346:	4b1c      	ldr	r3, [pc, #112]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000348:	2200      	movs	r2, #0
 800034a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800034c:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 800034e:	2200      	movs	r2, #0
 8000350:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000352:	4b19      	ldr	r3, [pc, #100]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000354:	222c      	movs	r2, #44	@ 0x2c
 8000356:	2100      	movs	r1, #0
 8000358:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800035a:	4b17      	ldr	r3, [pc, #92]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 800035c:	2200      	movs	r2, #0
 800035e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000360:	4b15      	ldr	r3, [pc, #84]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000362:	2200      	movs	r2, #0
 8000364:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000366:	4b14      	ldr	r3, [pc, #80]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000368:	2200      	movs	r2, #0
 800036a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800036c:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 800036e:	223c      	movs	r2, #60	@ 0x3c
 8000370:	2100      	movs	r1, #0
 8000372:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000374:	4b10      	ldr	r3, [pc, #64]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 8000376:	2200      	movs	r2, #0
 8000378:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800037a:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 800037c:	0018      	movs	r0, r3
 800037e:	f000 fbc7 	bl	8000b10 <HAL_ADC_Init>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000386:	f000 f90b 	bl	80005a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2201      	movs	r2, #1
 800038e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039c:	1d3a      	adds	r2, r7, #4
 800039e:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <MX_ADC1_Init+0xcc>)
 80003a0:	0011      	movs	r1, r2
 80003a2:	0018      	movs	r0, r3
 80003a4:	f000 fd5a 	bl	8000e5c <HAL_ADC_ConfigChannel>
 80003a8:	1e03      	subs	r3, r0, #0
 80003aa:	d001      	beq.n	80003b0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80003ac:	f000 f8f8 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b0:	46c0      	nop			@ (mov r8, r8)
 80003b2:	46bd      	mov	sp, r7
 80003b4:	b004      	add	sp, #16
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000028 	.word	0x20000028
 80003bc:	40012400 	.word	0x40012400

080003c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c6:	2310      	movs	r3, #16
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	0018      	movs	r0, r3
 80003cc:	2310      	movs	r3, #16
 80003ce:	001a      	movs	r2, r3
 80003d0:	2100      	movs	r1, #0
 80003d2:	f002 fa1d 	bl	8002810 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	0018      	movs	r0, r3
 80003da:	230c      	movs	r3, #12
 80003dc:	001a      	movs	r2, r3
 80003de:	2100      	movs	r1, #0
 80003e0:	f002 fa16 	bl	8002810 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000460 <MX_TIM3_Init+0xa0>)
 80003e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000464 <MX_TIM3_Init+0xa4>)
 80003e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80003ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000460 <MX_TIM3_Init+0xa0>)
 80003ec:	224f      	movs	r2, #79	@ 0x4f
 80003ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000460 <MX_TIM3_Init+0xa0>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80003f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000460 <MX_TIM3_Init+0xa0>)
 80003f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000468 <MX_TIM3_Init+0xa8>)
 80003fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fc:	4b18      	ldr	r3, [pc, #96]	@ (8000460 <MX_TIM3_Init+0xa0>)
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000402:	4b17      	ldr	r3, [pc, #92]	@ (8000460 <MX_TIM3_Init+0xa0>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000408:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <MX_TIM3_Init+0xa0>)
 800040a:	0018      	movs	r0, r3
 800040c:	f001 fde0 	bl	8001fd0 <HAL_TIM_Base_Init>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000414:	f000 f8c4 	bl	80005a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000418:	2110      	movs	r1, #16
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2280      	movs	r2, #128	@ 0x80
 800041e:	0152      	lsls	r2, r2, #5
 8000420:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000422:	187a      	adds	r2, r7, r1
 8000424:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <MX_TIM3_Init+0xa0>)
 8000426:	0011      	movs	r1, r2
 8000428:	0018      	movs	r0, r3
 800042a:	f001 ff79 	bl	8002320 <HAL_TIM_ConfigClockSource>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000432:	f000 f8b5 	bl	80005a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000442:	1d3a      	adds	r2, r7, #4
 8000444:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <MX_TIM3_Init+0xa0>)
 8000446:	0011      	movs	r1, r2
 8000448:	0018      	movs	r0, r3
 800044a:	f002 f967 	bl	800271c <HAL_TIMEx_MasterConfigSynchronization>
 800044e:	1e03      	subs	r3, r0, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000452:	f000 f8a5 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b008      	add	sp, #32
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	2000008c 	.word	0x2000008c
 8000464:	40000400 	.word	0x40000400
 8000468:	0000270f 	.word	0x0000270f

0800046c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b089      	sub	sp, #36	@ 0x24
 8000470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	240c      	movs	r4, #12
 8000474:	193b      	adds	r3, r7, r4
 8000476:	0018      	movs	r0, r3
 8000478:	2314      	movs	r3, #20
 800047a:	001a      	movs	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f002 f9c7 	bl	8002810 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b39      	ldr	r3, [pc, #228]	@ (8000568 <MX_GPIO_Init+0xfc>)
 8000484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000486:	4b38      	ldr	r3, [pc, #224]	@ (8000568 <MX_GPIO_Init+0xfc>)
 8000488:	2101      	movs	r1, #1
 800048a:	430a      	orrs	r2, r1
 800048c:	635a      	str	r2, [r3, #52]	@ 0x34
 800048e:	4b36      	ldr	r3, [pc, #216]	@ (8000568 <MX_GPIO_Init+0xfc>)
 8000490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000492:	2201      	movs	r2, #1
 8000494:	4013      	ands	r3, r2
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049a:	4b33      	ldr	r3, [pc, #204]	@ (8000568 <MX_GPIO_Init+0xfc>)
 800049c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800049e:	4b32      	ldr	r3, [pc, #200]	@ (8000568 <MX_GPIO_Init+0xfc>)
 80004a0:	2102      	movs	r1, #2
 80004a2:	430a      	orrs	r2, r1
 80004a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80004a6:	4b30      	ldr	r3, [pc, #192]	@ (8000568 <MX_GPIO_Init+0xfc>)
 80004a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004aa:	2202      	movs	r2, #2
 80004ac:	4013      	ands	r3, r2
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80004b2:	23c0      	movs	r3, #192	@ 0xc0
 80004b4:	0159      	lsls	r1, r3, #5
 80004b6:	23a0      	movs	r3, #160	@ 0xa0
 80004b8:	05db      	lsls	r3, r3, #23
 80004ba:	2200      	movs	r2, #0
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 f8f3 	bl	80016a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80004c2:	4b2a      	ldr	r3, [pc, #168]	@ (800056c <MX_GPIO_Init+0x100>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	2118      	movs	r1, #24
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 f8ed 	bl	80016a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	221c      	movs	r2, #28
 80004d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	4a26      	ldr	r2, [pc, #152]	@ (8000570 <MX_GPIO_Init+0x104>)
 80004d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e0:	193a      	adds	r2, r7, r4
 80004e2:	23a0      	movs	r3, #160	@ 0xa0
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 ff6b 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80004ee:	0021      	movs	r1, r4
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	22c0      	movs	r2, #192	@ 0xc0
 80004f4:	0152      	lsls	r2, r2, #5
 80004f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f8:	000c      	movs	r4, r1
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	2201      	movs	r2, #1
 80004fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	193a      	adds	r2, r7, r4
 800050e:	23a0      	movs	r3, #160	@ 0xa0
 8000510:	05db      	lsls	r3, r3, #23
 8000512:	0011      	movs	r1, r2
 8000514:	0018      	movs	r0, r3
 8000516:	f000 ff55 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800051a:	0021      	movs	r1, r4
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2218      	movs	r2, #24
 8000520:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2201      	movs	r2, #1
 8000526:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000534:	187b      	adds	r3, r7, r1
 8000536:	4a0d      	ldr	r2, [pc, #52]	@ (800056c <MX_GPIO_Init+0x100>)
 8000538:	0019      	movs	r1, r3
 800053a:	0010      	movs	r0, r2
 800053c:	f000 ff42 	bl	80013c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	2100      	movs	r1, #0
 8000544:	2006      	movs	r0, #6
 8000546:	f000 ff0b 	bl	8001360 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800054a:	2006      	movs	r0, #6
 800054c:	f000 ff1d 	bl	800138a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	2100      	movs	r1, #0
 8000554:	2007      	movs	r0, #7
 8000556:	f000 ff03 	bl	8001360 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800055a:	2007      	movs	r0, #7
 800055c:	f000 ff15 	bl	800138a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000560:	46c0      	nop			@ (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b009      	add	sp, #36	@ 0x24
 8000566:	bd90      	pop	{r4, r7, pc}
 8000568:	40021000 	.word	0x40021000
 800056c:	50000400 	.word	0x50000400
 8000570:	10110000 	.word	0x10110000

08000574 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim3 )
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000580:	429a      	cmp	r2, r3
 8000582:	d104      	bne.n	800058e <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000584:	4b05      	ldr	r3, [pc, #20]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000586:	2110      	movs	r1, #16
 8000588:	0018      	movs	r0, r3
 800058a:	f001 f8aa 	bl	80016e2 <HAL_GPIO_TogglePin>
    //llegir ADC
    //obtenir valor temperatura
    //funció regulador de temperatura
  }
}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b002      	add	sp, #8
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	2000008c 	.word	0x2000008c
 800059c:	50000400 	.word	0x50000400

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
}
 80005a6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a8:	46c0      	nop			@ (mov r8, r8)
 80005aa:	e7fd      	b.n	80005a8 <Error_Handler+0x8>

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b2:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <HAL_MspInit+0x44>)
 80005b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005b6:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <HAL_MspInit+0x44>)
 80005b8:	2101      	movs	r1, #1
 80005ba:	430a      	orrs	r2, r1
 80005bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80005be:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <HAL_MspInit+0x44>)
 80005c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c2:	2201      	movs	r2, #1
 80005c4:	4013      	ands	r3, r2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <HAL_MspInit+0x44>)
 80005cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005ce:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <HAL_MspInit+0x44>)
 80005d0:	2180      	movs	r1, #128	@ 0x80
 80005d2:	0549      	lsls	r1, r1, #21
 80005d4:	430a      	orrs	r2, r1
 80005d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005d8:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <HAL_MspInit+0x44>)
 80005da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005dc:	2380      	movs	r3, #128	@ 0x80
 80005de:	055b      	lsls	r3, r3, #21
 80005e0:	4013      	ands	r3, r2
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b002      	add	sp, #8
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	40021000 	.word	0x40021000

080005f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b091      	sub	sp, #68	@ 0x44
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	232c      	movs	r3, #44	@ 0x2c
 80005fe:	18fb      	adds	r3, r7, r3
 8000600:	0018      	movs	r0, r3
 8000602:	2314      	movs	r3, #20
 8000604:	001a      	movs	r2, r3
 8000606:	2100      	movs	r1, #0
 8000608:	f002 f902 	bl	8002810 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800060c:	2410      	movs	r4, #16
 800060e:	193b      	adds	r3, r7, r4
 8000610:	0018      	movs	r0, r3
 8000612:	231c      	movs	r3, #28
 8000614:	001a      	movs	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f002 f8fa 	bl	8002810 <memset>
  if(hadc->Instance==ADC1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a20      	ldr	r2, [pc, #128]	@ (80006a4 <HAL_ADC_MspInit+0xb0>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d139      	bne.n	800069a <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000626:	193b      	adds	r3, r7, r4
 8000628:	2280      	movs	r2, #128	@ 0x80
 800062a:	01d2      	lsls	r2, r2, #7
 800062c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	193b      	adds	r3, r7, r4
 8000636:	0018      	movs	r0, r3
 8000638:	f001 fbdc 	bl	8001df4 <HAL_RCCEx_PeriphCLKConfig>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000640:	f7ff ffae 	bl	80005a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000644:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <HAL_ADC_MspInit+0xb4>)
 8000646:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000648:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <HAL_ADC_MspInit+0xb4>)
 800064a:	2180      	movs	r1, #128	@ 0x80
 800064c:	0349      	lsls	r1, r1, #13
 800064e:	430a      	orrs	r2, r1
 8000650:	641a      	str	r2, [r3, #64]	@ 0x40
 8000652:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <HAL_ADC_MspInit+0xb4>)
 8000654:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000656:	2380      	movs	r3, #128	@ 0x80
 8000658:	035b      	lsls	r3, r3, #13
 800065a:	4013      	ands	r3, r2
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <HAL_ADC_MspInit+0xb4>)
 8000662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000664:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <HAL_ADC_MspInit+0xb4>)
 8000666:	2101      	movs	r1, #1
 8000668:	430a      	orrs	r2, r1
 800066a:	635a      	str	r2, [r3, #52]	@ 0x34
 800066c:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <HAL_ADC_MspInit+0xb4>)
 800066e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000670:	2201      	movs	r2, #1
 8000672:	4013      	ands	r3, r2
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	212c      	movs	r1, #44	@ 0x2c
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2201      	movs	r2, #1
 800067e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2203      	movs	r2, #3
 8000684:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	187a      	adds	r2, r7, r1
 800068e:	23a0      	movs	r3, #160	@ 0xa0
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	0011      	movs	r1, r2
 8000694:	0018      	movs	r0, r3
 8000696:	f000 fe95 	bl	80013c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b011      	add	sp, #68	@ 0x44
 80006a0:	bd90      	pop	{r4, r7, pc}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	40012400 	.word	0x40012400
 80006a8:	40021000 	.word	0x40021000

080006ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0d      	ldr	r2, [pc, #52]	@ (80006f0 <HAL_TIM_Base_MspInit+0x44>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d113      	bne.n	80006e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006be:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <HAL_TIM_Base_MspInit+0x48>)
 80006c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <HAL_TIM_Base_MspInit+0x48>)
 80006c4:	2102      	movs	r1, #2
 80006c6:	430a      	orrs	r2, r1
 80006c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006ca:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <HAL_TIM_Base_MspInit+0x48>)
 80006cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006ce:	2202      	movs	r2, #2
 80006d0:	4013      	ands	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2010      	movs	r0, #16
 80006dc:	f000 fe40 	bl	8001360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006e0:	2010      	movs	r0, #16
 80006e2:	f000 fe52 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b004      	add	sp, #16
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	40000400 	.word	0x40000400
 80006f4:	40021000 	.word	0x40021000

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006fc:	46c0      	nop			@ (mov r8, r8)
 80006fe:	e7fd      	b.n	80006fc <NMI_Handler+0x4>

08000700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	e7fd      	b.n	8000704 <HardFault_Handler+0x4>

08000708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800070c:	46c0      	nop			@ (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000720:	f000 f8b8 	bl	8000894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000724:	46c0      	nop			@ (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800072e:	2004      	movs	r0, #4
 8000730:	f000 fff2 	bl	8001718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000734:	2008      	movs	r0, #8
 8000736:	f000 ffef 	bl	8001718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000744:	2010      	movs	r0, #16
 8000746:	f000 ffe7 	bl	8001718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000754:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <TIM3_IRQHandler+0x14>)
 8000756:	0018      	movs	r0, r3
 8000758:	f001 fce0 	bl	800211c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	2000008c 	.word	0x2000008c

08000768 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800076c:	4b03      	ldr	r3, [pc, #12]	@ (800077c <SystemInit+0x14>)
 800076e:	2280      	movs	r2, #128	@ 0x80
 8000770:	0512      	lsls	r2, r2, #20
 8000772:	609a      	str	r2, [r3, #8]
#endif
}
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000780:	480d      	ldr	r0, [pc, #52]	@ (80007b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000782:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000784:	f7ff fff0 	bl	8000768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000788:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800078a:	e003      	b.n	8000794 <LoopCopyDataInit>

0800078c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800078c:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800078e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000790:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000792:	3104      	adds	r1, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000794:	480a      	ldr	r0, [pc, #40]	@ (80007c0 <LoopForever+0xa>)
  ldr r3, =_edata
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <LoopForever+0xe>)
  adds r2, r0, r1
 8000798:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800079a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800079c:	d3f6      	bcc.n	800078c <CopyDataInit>
  ldr r2, =_sbss
 800079e:	4a0a      	ldr	r2, [pc, #40]	@ (80007c8 <LoopForever+0x12>)
  b LoopFillZerobss
 80007a0:	e002      	b.n	80007a8 <LoopFillZerobss>

080007a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  str  r3, [r2]
 80007a4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a6:	3204      	adds	r2, #4

080007a8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80007a8:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <LoopForever+0x16>)
  cmp r2, r3
 80007aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007ac:	d3f9      	bcc.n	80007a2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80007ae:	f002 f837 	bl	8002820 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007b2:	f7ff fd35 	bl	8000220 <main>

080007b6 <LoopForever>:

LoopForever:
    b LoopForever
 80007b6:	e7fe      	b.n	80007b6 <LoopForever>
  ldr   r0, =_estack
 80007b8:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80007bc:	080028c8 	.word	0x080028c8
  ldr r0, =_sdata
 80007c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80007c8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80007cc:	200000dc 	.word	0x200000dc

080007d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC1_IRQHandler>

080007d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007de:	2003      	movs	r0, #3
 80007e0:	f000 f80e 	bl	8000800 <HAL_InitTick>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d003      	beq.n	80007f0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
 80007ee:	e001      	b.n	80007f4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007f0:	f7ff fedc 	bl	80005ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	781b      	ldrb	r3, [r3, #0]
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b002      	add	sp, #8
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000808:	230f      	movs	r3, #15
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000810:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <HAL_InitTick+0x88>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d02b      	beq.n	8000870 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000818:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <HAL_InitTick+0x8c>)
 800081a:	681c      	ldr	r4, [r3, #0]
 800081c:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <HAL_InitTick+0x88>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	0019      	movs	r1, r3
 8000822:	23fa      	movs	r3, #250	@ 0xfa
 8000824:	0098      	lsls	r0, r3, #2
 8000826:	f7ff fc6f 	bl	8000108 <__udivsi3>
 800082a:	0003      	movs	r3, r0
 800082c:	0019      	movs	r1, r3
 800082e:	0020      	movs	r0, r4
 8000830:	f7ff fc6a 	bl	8000108 <__udivsi3>
 8000834:	0003      	movs	r3, r0
 8000836:	0018      	movs	r0, r3
 8000838:	f000 fdb7 	bl	80013aa <HAL_SYSTICK_Config>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d112      	bne.n	8000866 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b03      	cmp	r3, #3
 8000844:	d80a      	bhi.n	800085c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	2301      	movs	r3, #1
 800084a:	425b      	negs	r3, r3
 800084c:	2200      	movs	r2, #0
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fd86 	bl	8001360 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000854:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <HAL_InitTick+0x90>)
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	e00d      	b.n	8000878 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800085c:	230f      	movs	r3, #15
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	e008      	b.n	8000878 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000866:	230f      	movs	r3, #15
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
 800086e:	e003      	b.n	8000878 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000870:	230f      	movs	r3, #15
 8000872:	18fb      	adds	r3, r7, r3
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000878:	230f      	movs	r3, #15
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	781b      	ldrb	r3, [r3, #0]
}
 800087e:	0018      	movs	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	b005      	add	sp, #20
 8000884:	bd90      	pop	{r4, r7, pc}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	20000008 	.word	0x20000008
 800088c:	20000000 	.word	0x20000000
 8000890:	20000004 	.word	0x20000004

08000894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <HAL_IncTick+0x1c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	001a      	movs	r2, r3
 800089e:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <HAL_IncTick+0x20>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	18d2      	adds	r2, r2, r3
 80008a4:	4b03      	ldr	r3, [pc, #12]	@ (80008b4 <HAL_IncTick+0x20>)
 80008a6:	601a      	str	r2, [r3, #0]
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	20000008 	.word	0x20000008
 80008b4:	200000d8 	.word	0x200000d8

080008b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  return uwTick;
 80008bc:	4b02      	ldr	r3, [pc, #8]	@ (80008c8 <HAL_GetTick+0x10>)
 80008be:	681b      	ldr	r3, [r3, #0]
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	200000d8 	.word	0x200000d8

080008cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d4:	f7ff fff0 	bl	80008b8 <HAL_GetTick>
 80008d8:	0003      	movs	r3, r0
 80008da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	3301      	adds	r3, #1
 80008e4:	d005      	beq.n	80008f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <HAL_Delay+0x44>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	001a      	movs	r2, r3
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	189b      	adds	r3, r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	f7ff ffe0 	bl	80008b8 <HAL_GetTick>
 80008f8:	0002      	movs	r2, r0
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	429a      	cmp	r2, r3
 8000902:	d8f7      	bhi.n	80008f4 <HAL_Delay+0x28>
  {
  }
}
 8000904:	46c0      	nop			@ (mov r8, r8)
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b004      	add	sp, #16
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	20000008 	.word	0x20000008

08000914 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a05      	ldr	r2, [pc, #20]	@ (8000938 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000924:	401a      	ands	r2, r3
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	431a      	orrs	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b002      	add	sp, #8
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	ff3fffff 	.word	0xff3fffff

0800093c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	23c0      	movs	r3, #192	@ 0xc0
 800094a:	041b      	lsls	r3, r3, #16
 800094c:	4013      	ands	r3, r2
}
 800094e:	0018      	movs	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}

08000956 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b084      	sub	sp, #16
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	2104      	movs	r1, #4
 800096a:	400a      	ands	r2, r1
 800096c:	2107      	movs	r1, #7
 800096e:	4091      	lsls	r1, r2
 8000970:	000a      	movs	r2, r1
 8000972:	43d2      	mvns	r2, r2
 8000974:	401a      	ands	r2, r3
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	2104      	movs	r1, #4
 800097a:	400b      	ands	r3, r1
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	4099      	lsls	r1, r3
 8000980:	000b      	movs	r3, r1
 8000982:	431a      	orrs	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b004      	add	sp, #16
 800098e:	bd80      	pop	{r7, pc}

08000990 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	2104      	movs	r1, #4
 80009a2:	400a      	ands	r2, r1
 80009a4:	2107      	movs	r1, #7
 80009a6:	4091      	lsls	r1, r2
 80009a8:	000a      	movs	r2, r1
 80009aa:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	2104      	movs	r1, #4
 80009b0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80009b2:	40da      	lsrs	r2, r3
 80009b4:	0013      	movs	r3, r2
}
 80009b6:	0018      	movs	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b002      	add	sp, #8
 80009bc:	bd80      	pop	{r7, pc}

080009be <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b084      	sub	sp, #16
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	60f8      	str	r0, [r7, #12]
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	211f      	movs	r1, #31
 80009d2:	400a      	ands	r2, r1
 80009d4:	210f      	movs	r1, #15
 80009d6:	4091      	lsls	r1, r2
 80009d8:	000a      	movs	r2, r1
 80009da:	43d2      	mvns	r2, r2
 80009dc:	401a      	ands	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	0e9b      	lsrs	r3, r3, #26
 80009e2:	210f      	movs	r1, #15
 80009e4:	4019      	ands	r1, r3
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	201f      	movs	r0, #31
 80009ea:	4003      	ands	r3, r0
 80009ec:	4099      	lsls	r1, r3
 80009ee:	000b      	movs	r3, r1
 80009f0:	431a      	orrs	r2, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b004      	add	sp, #16
 80009fc:	bd80      	pop	{r7, pc}

080009fe <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	025b      	lsls	r3, r3, #9
 8000a10:	0a5b      	lsrs	r3, r3, #9
 8000a12:	431a      	orrs	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	0252      	lsls	r2, r2, #9
 8000a32:	0a52      	lsrs	r2, r2, #9
 8000a34:	43d2      	mvns	r2, r2
 8000a36:	401a      	ands	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b002      	add	sp, #8
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	68ba      	ldr	r2, [r7, #8]
 8000a56:	0212      	lsls	r2, r2, #8
 8000a58:	43d2      	mvns	r2, r2
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	021b      	lsls	r3, r3, #8
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	400b      	ands	r3, r1
 8000a64:	4904      	ldr	r1, [pc, #16]	@ (8000a78 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000a66:	400b      	ands	r3, r1
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b004      	add	sp, #16
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	7fffff00 	.word	0x7fffff00

08000a7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <LL_ADC_EnableInternalRegulator+0x24>)
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	2280      	movs	r2, #128	@ 0x80
 8000a8e:	0552      	lsls	r2, r2, #21
 8000a90:	431a      	orrs	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	6fffffe8 	.word	0x6fffffe8

08000aa4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	2380      	movs	r3, #128	@ 0x80
 8000ab2:	055b      	lsls	r3, r3, #21
 8000ab4:	401a      	ands	r2, r3
 8000ab6:	2380      	movs	r3, #128	@ 0x80
 8000ab8:	055b      	lsls	r3, r3, #21
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d101      	bne.n	8000ac2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}

08000acc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4013      	ands	r3, r2
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d101      	bne.n	8000ae4 <LL_ADC_IsEnabled+0x18>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e000      	b.n	8000ae6 <LL_ADC_IsEnabled+0x1a>
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}

08000aee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	2204      	movs	r2, #4
 8000afc:	4013      	ands	r3, r2
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d101      	bne.n	8000b06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b02:	2301      	movs	r3, #1
 8000b04:	e000      	b.n	8000b08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b18:	231f      	movs	r3, #31
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e17e      	b.n	8000e34 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10a      	bne.n	8000b54 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff fd57 	bl	80005f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2254      	movs	r2, #84	@ 0x54
 8000b50:	2100      	movs	r1, #0
 8000b52:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff ffa3 	bl	8000aa4 <LL_ADC_IsInternalRegulatorEnabled>
 8000b5e:	1e03      	subs	r3, r0, #0
 8000b60:	d114      	bne.n	8000b8c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	0018      	movs	r0, r3
 8000b68:	f7ff ff88 	bl	8000a7c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000b6c:	4bb3      	ldr	r3, [pc, #716]	@ (8000e3c <HAL_ADC_Init+0x32c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	49b3      	ldr	r1, [pc, #716]	@ (8000e40 <HAL_ADC_Init+0x330>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff fac8 	bl	8000108 <__udivsi3>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b7e:	e002      	b.n	8000b86 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1f9      	bne.n	8000b80 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff ff87 	bl	8000aa4 <LL_ADC_IsInternalRegulatorEnabled>
 8000b96:	1e03      	subs	r3, r0, #0
 8000b98:	d10f      	bne.n	8000bba <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9e:	2210      	movs	r2, #16
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000baa:	2201      	movs	r2, #1
 8000bac:	431a      	orrs	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000bb2:	231f      	movs	r3, #31
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff ff95 	bl	8000aee <LL_ADC_REG_IsConversionOngoing>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bcc:	2210      	movs	r2, #16
 8000bce:	4013      	ands	r3, r2
 8000bd0:	d000      	beq.n	8000bd4 <HAL_ADC_Init+0xc4>
 8000bd2:	e122      	b.n	8000e1a <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d000      	beq.n	8000bdc <HAL_ADC_Init+0xcc>
 8000bda:	e11e      	b.n	8000e1a <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be0:	4a98      	ldr	r2, [pc, #608]	@ (8000e44 <HAL_ADC_Init+0x334>)
 8000be2:	4013      	ands	r3, r2
 8000be4:	2202      	movs	r2, #2
 8000be6:	431a      	orrs	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff ff6b 	bl	8000acc <LL_ADC_IsEnabled>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d000      	beq.n	8000bfc <HAL_ADC_Init+0xec>
 8000bfa:	e0ad      	b.n	8000d58 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7e1b      	ldrb	r3, [r3, #24]
 8000c04:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c06:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7e5b      	ldrb	r3, [r3, #25]
 8000c0c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c0e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7e9b      	ldrb	r3, [r3, #26]
 8000c14:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c16:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <HAL_ADC_Init+0x116>
 8000c20:	2380      	movs	r3, #128	@ 0x80
 8000c22:	015b      	lsls	r3, r3, #5
 8000c24:	e000      	b.n	8000c28 <HAL_ADC_Init+0x118>
 8000c26:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c28:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c2e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	da04      	bge.n	8000c42 <HAL_ADC_Init+0x132>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	085b      	lsrs	r3, r3, #1
 8000c40:	e001      	b.n	8000c46 <HAL_ADC_Init+0x136>
 8000c42:	2380      	movs	r3, #128	@ 0x80
 8000c44:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000c46:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	212c      	movs	r1, #44	@ 0x2c
 8000c4c:	5c5b      	ldrb	r3, [r3, r1]
 8000c4e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c50:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2220      	movs	r2, #32
 8000c5c:	5c9b      	ldrb	r3, [r3, r2]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d115      	bne.n	8000c8e <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7e9b      	ldrb	r3, [r3, #26]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d105      	bne.n	8000c76 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	2280      	movs	r2, #128	@ 0x80
 8000c6e:	0252      	lsls	r2, r2, #9
 8000c70:	4313      	orrs	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	e00b      	b.n	8000c8e <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c86:	2201      	movs	r2, #1
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00a      	beq.n	8000cac <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c9a:	23e0      	movs	r3, #224	@ 0xe0
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	4a65      	ldr	r2, [pc, #404]	@ (8000e48 <HAL_ADC_Init+0x338>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	0f9b      	lsrs	r3, r3, #30
 8000cc8:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	223c      	movs	r2, #60	@ 0x3c
 8000cda:	5c9b      	ldrb	r3, [r3, r2]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d111      	bne.n	8000d04 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	0f9b      	lsrs	r3, r3, #30
 8000ce6:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cec:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000cf2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000cf8:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4313      	orrs	r3, r2
 8000d02:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	4a50      	ldr	r2, [pc, #320]	@ (8000e4c <HAL_ADC_Init+0x33c>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	0019      	movs	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	23c0      	movs	r3, #192	@ 0xc0
 8000d20:	061b      	lsls	r3, r3, #24
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d018      	beq.n	8000d58 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d2a:	2380      	movs	r3, #128	@ 0x80
 8000d2c:	05db      	lsls	r3, r3, #23
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d012      	beq.n	8000d58 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d36:	2380      	movs	r3, #128	@ 0x80
 8000d38:	061b      	lsls	r3, r3, #24
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d00c      	beq.n	8000d58 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000d3e:	4b44      	ldr	r3, [pc, #272]	@ (8000e50 <HAL_ADC_Init+0x340>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a44      	ldr	r2, [pc, #272]	@ (8000e54 <HAL_ADC_Init+0x344>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	0019      	movs	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	23f0      	movs	r3, #240	@ 0xf0
 8000d4e:	039b      	lsls	r3, r3, #14
 8000d50:	401a      	ands	r2, r3
 8000d52:	4b3f      	ldr	r3, [pc, #252]	@ (8000e50 <HAL_ADC_Init+0x340>)
 8000d54:	430a      	orrs	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d60:	001a      	movs	r2, r3
 8000d62:	2100      	movs	r1, #0
 8000d64:	f7ff fdf7 	bl	8000956 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6818      	ldr	r0, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d70:	4939      	ldr	r1, [pc, #228]	@ (8000e58 <HAL_ADC_Init+0x348>)
 8000d72:	001a      	movs	r2, r3
 8000d74:	f7ff fdef 	bl	8000956 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d109      	bne.n	8000d94 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	4249      	negs	r1, r1
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d92:	e018      	b.n	8000dc6 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	691a      	ldr	r2, [r3, #16]
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	039b      	lsls	r3, r3, #14
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d112      	bne.n	8000dc6 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	221c      	movs	r2, #28
 8000db0:	4013      	ands	r3, r2
 8000db2:	2210      	movs	r2, #16
 8000db4:	4252      	negs	r2, r2
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0011      	movs	r1, r2
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2100      	movs	r1, #0
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f7ff fddf 	bl	8000990 <LL_ADC_GetSamplingTimeCommonChannels>
 8000dd2:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d10b      	bne.n	8000df4 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de6:	2203      	movs	r2, #3
 8000de8:	4393      	bics	r3, r2
 8000dea:	2201      	movs	r2, #1
 8000dec:	431a      	orrs	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000df2:	e01c      	b.n	8000e2e <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df8:	2212      	movs	r2, #18
 8000dfa:	4393      	bics	r3, r2
 8000dfc:	2210      	movs	r2, #16
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e08:	2201      	movs	r2, #1
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8000e10:	231f      	movs	r3, #31
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e18:	e009      	b.n	8000e2e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1e:	2210      	movs	r2, #16
 8000e20:	431a      	orrs	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000e26:	231f      	movs	r3, #31
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e2e:	231f      	movs	r3, #31
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	781b      	ldrb	r3, [r3, #0]
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b008      	add	sp, #32
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	00030d40 	.word	0x00030d40
 8000e44:	fffffefd 	.word	0xfffffefd
 8000e48:	ffde0201 	.word	0xffde0201
 8000e4c:	1ffffc02 	.word	0x1ffffc02
 8000e50:	40012708 	.word	0x40012708
 8000e54:	ffc3ffff 	.word	0xffc3ffff
 8000e58:	7fffff04 	.word	0x7fffff04

08000e5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e66:	2317      	movs	r3, #23
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2254      	movs	r2, #84	@ 0x54
 8000e76:	5c9b      	ldrb	r3, [r3, r2]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d101      	bne.n	8000e80 <HAL_ADC_ConfigChannel+0x24>
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	e1be      	b.n	80011fe <HAL_ADC_ConfigChannel+0x3a2>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2254      	movs	r2, #84	@ 0x54
 8000e84:	2101      	movs	r1, #1
 8000e86:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff fe2e 	bl	8000aee <LL_ADC_REG_IsConversionOngoing>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d000      	beq.n	8000e98 <HAL_ADC_ConfigChannel+0x3c>
 8000e96:	e1a1      	b.n	80011dc <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d100      	bne.n	8000ea2 <HAL_ADC_ConfigChannel+0x46>
 8000ea0:	e152      	b.n	8001148 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	691a      	ldr	r2, [r3, #16]
 8000ea6:	2380      	movs	r3, #128	@ 0x80
 8000ea8:	061b      	lsls	r3, r3, #24
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d004      	beq.n	8000eb8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000eb2:	4ac2      	ldr	r2, [pc, #776]	@ (80011bc <HAL_ADC_ConfigChannel+0x360>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d108      	bne.n	8000eca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	0010      	movs	r0, r2
 8000ec4:	f7ff fd9b 	bl	80009fe <LL_ADC_REG_SetSequencerChAdd>
 8000ec8:	e0ed      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	211f      	movs	r1, #31
 8000ed4:	400b      	ands	r3, r1
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	4099      	lsls	r1, r3
 8000eda:	000b      	movs	r3, r1
 8000edc:	43db      	mvns	r3, r3
 8000ede:	4013      	ands	r3, r2
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	025b      	lsls	r3, r3, #9
 8000ee8:	0a5b      	lsrs	r3, r3, #9
 8000eea:	d105      	bne.n	8000ef8 <HAL_ADC_ConfigChannel+0x9c>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	0e9b      	lsrs	r3, r3, #26
 8000ef2:	221f      	movs	r2, #31
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	e0bc      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2201      	movs	r2, #1
 8000efe:	4013      	ands	r3, r2
 8000f00:	d000      	beq.n	8000f04 <HAL_ADC_ConfigChannel+0xa8>
 8000f02:	e0b5      	b.n	8001070 <HAL_ADC_ConfigChannel+0x214>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d000      	beq.n	8000f10 <HAL_ADC_ConfigChannel+0xb4>
 8000f0e:	e0ad      	b.n	800106c <HAL_ADC_ConfigChannel+0x210>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2204      	movs	r2, #4
 8000f16:	4013      	ands	r3, r2
 8000f18:	d000      	beq.n	8000f1c <HAL_ADC_ConfigChannel+0xc0>
 8000f1a:	e0a5      	b.n	8001068 <HAL_ADC_ConfigChannel+0x20c>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2208      	movs	r2, #8
 8000f22:	4013      	ands	r3, r2
 8000f24:	d000      	beq.n	8000f28 <HAL_ADC_ConfigChannel+0xcc>
 8000f26:	e09d      	b.n	8001064 <HAL_ADC_ConfigChannel+0x208>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d000      	beq.n	8000f34 <HAL_ADC_ConfigChannel+0xd8>
 8000f32:	e095      	b.n	8001060 <HAL_ADC_ConfigChannel+0x204>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2220      	movs	r2, #32
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d000      	beq.n	8000f40 <HAL_ADC_ConfigChannel+0xe4>
 8000f3e:	e08d      	b.n	800105c <HAL_ADC_ConfigChannel+0x200>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2240      	movs	r2, #64	@ 0x40
 8000f46:	4013      	ands	r3, r2
 8000f48:	d000      	beq.n	8000f4c <HAL_ADC_ConfigChannel+0xf0>
 8000f4a:	e085      	b.n	8001058 <HAL_ADC_ConfigChannel+0x1fc>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2280      	movs	r2, #128	@ 0x80
 8000f52:	4013      	ands	r3, r2
 8000f54:	d000      	beq.n	8000f58 <HAL_ADC_ConfigChannel+0xfc>
 8000f56:	e07d      	b.n	8001054 <HAL_ADC_ConfigChannel+0x1f8>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2380      	movs	r3, #128	@ 0x80
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4013      	ands	r3, r2
 8000f62:	d000      	beq.n	8000f66 <HAL_ADC_ConfigChannel+0x10a>
 8000f64:	e074      	b.n	8001050 <HAL_ADC_ConfigChannel+0x1f4>
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	2380      	movs	r3, #128	@ 0x80
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d000      	beq.n	8000f74 <HAL_ADC_ConfigChannel+0x118>
 8000f72:	e06b      	b.n	800104c <HAL_ADC_ConfigChannel+0x1f0>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2380      	movs	r3, #128	@ 0x80
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d000      	beq.n	8000f82 <HAL_ADC_ConfigChannel+0x126>
 8000f80:	e062      	b.n	8001048 <HAL_ADC_ConfigChannel+0x1ec>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	2380      	movs	r3, #128	@ 0x80
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d000      	beq.n	8000f90 <HAL_ADC_ConfigChannel+0x134>
 8000f8e:	e059      	b.n	8001044 <HAL_ADC_ConfigChannel+0x1e8>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2380      	movs	r3, #128	@ 0x80
 8000f96:	015b      	lsls	r3, r3, #5
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d151      	bne.n	8001040 <HAL_ADC_ConfigChannel+0x1e4>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	2380      	movs	r3, #128	@ 0x80
 8000fa2:	019b      	lsls	r3, r3, #6
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d149      	bne.n	800103c <HAL_ADC_ConfigChannel+0x1e0>
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	01db      	lsls	r3, r3, #7
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d141      	bne.n	8001038 <HAL_ADC_ConfigChannel+0x1dc>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	2380      	movs	r3, #128	@ 0x80
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d139      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x1d8>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	025b      	lsls	r3, r3, #9
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d131      	bne.n	8001030 <HAL_ADC_ConfigChannel+0x1d4>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	029b      	lsls	r3, r3, #10
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d129      	bne.n	800102c <HAL_ADC_ConfigChannel+0x1d0>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	02db      	lsls	r3, r3, #11
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d121      	bne.n	8001028 <HAL_ADC_ConfigChannel+0x1cc>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	031b      	lsls	r3, r3, #12
 8000fec:	4013      	ands	r3, r2
 8000fee:	d119      	bne.n	8001024 <HAL_ADC_ConfigChannel+0x1c8>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2380      	movs	r3, #128	@ 0x80
 8000ff6:	035b      	lsls	r3, r3, #13
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d111      	bne.n	8001020 <HAL_ADC_ConfigChannel+0x1c4>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	2380      	movs	r3, #128	@ 0x80
 8001002:	039b      	lsls	r3, r3, #14
 8001004:	4013      	ands	r3, r2
 8001006:	d109      	bne.n	800101c <HAL_ADC_ConfigChannel+0x1c0>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	03db      	lsls	r3, r3, #15
 8001010:	4013      	ands	r3, r2
 8001012:	d001      	beq.n	8001018 <HAL_ADC_ConfigChannel+0x1bc>
 8001014:	2316      	movs	r3, #22
 8001016:	e02c      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001018:	2300      	movs	r3, #0
 800101a:	e02a      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 800101c:	2315      	movs	r3, #21
 800101e:	e028      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001020:	2314      	movs	r3, #20
 8001022:	e026      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001024:	2313      	movs	r3, #19
 8001026:	e024      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001028:	2312      	movs	r3, #18
 800102a:	e022      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 800102c:	2311      	movs	r3, #17
 800102e:	e020      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001030:	2310      	movs	r3, #16
 8001032:	e01e      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001034:	230f      	movs	r3, #15
 8001036:	e01c      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001038:	230e      	movs	r3, #14
 800103a:	e01a      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 800103c:	230d      	movs	r3, #13
 800103e:	e018      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001040:	230c      	movs	r3, #12
 8001042:	e016      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001044:	230b      	movs	r3, #11
 8001046:	e014      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001048:	230a      	movs	r3, #10
 800104a:	e012      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 800104c:	2309      	movs	r3, #9
 800104e:	e010      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001050:	2308      	movs	r3, #8
 8001052:	e00e      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001054:	2307      	movs	r3, #7
 8001056:	e00c      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001058:	2306      	movs	r3, #6
 800105a:	e00a      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 800105c:	2305      	movs	r3, #5
 800105e:	e008      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001060:	2304      	movs	r3, #4
 8001062:	e006      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001064:	2303      	movs	r3, #3
 8001066:	e004      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001068:	2302      	movs	r3, #2
 800106a:	e002      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <HAL_ADC_ConfigChannel+0x216>
 8001070:	2300      	movs	r3, #0
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	6852      	ldr	r2, [r2, #4]
 8001076:	201f      	movs	r0, #31
 8001078:	4002      	ands	r2, r0
 800107a:	4093      	lsls	r3, r2
 800107c:	000a      	movs	r2, r1
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	429a      	cmp	r2, r3
 8001092:	d808      	bhi.n	80010a6 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	6859      	ldr	r1, [r3, #4]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	001a      	movs	r2, r3
 80010a2:	f7ff fc8c 	bl	80009be <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	6819      	ldr	r1, [r3, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	001a      	movs	r2, r3
 80010b4:	f7ff fcc6 	bl	8000a44 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db00      	blt.n	80010c2 <HAL_ADC_ConfigChannel+0x266>
 80010c0:	e096      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80010c2:	4b3f      	ldr	r3, [pc, #252]	@ (80011c0 <HAL_ADC_ConfigChannel+0x364>)
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff fc39 	bl	800093c <LL_ADC_GetCommonPathInternalCh>
 80010ca:	0003      	movs	r3, r0
 80010cc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a3c      	ldr	r2, [pc, #240]	@ (80011c4 <HAL_ADC_ConfigChannel+0x368>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d123      	bne.n	8001120 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	2380      	movs	r3, #128	@ 0x80
 80010dc:	041b      	lsls	r3, r3, #16
 80010de:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80010e0:	d11e      	bne.n	8001120 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	2280      	movs	r2, #128	@ 0x80
 80010e6:	0412      	lsls	r2, r2, #16
 80010e8:	4313      	orrs	r3, r2
 80010ea:	4a35      	ldr	r2, [pc, #212]	@ (80011c0 <HAL_ADC_ConfigChannel+0x364>)
 80010ec:	0019      	movs	r1, r3
 80010ee:	0010      	movs	r0, r2
 80010f0:	f7ff fc10 	bl	8000914 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80010f4:	4b34      	ldr	r3, [pc, #208]	@ (80011c8 <HAL_ADC_ConfigChannel+0x36c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4934      	ldr	r1, [pc, #208]	@ (80011cc <HAL_ADC_ConfigChannel+0x370>)
 80010fa:	0018      	movs	r0, r3
 80010fc:	f7ff f804 	bl	8000108 <__udivsi3>
 8001100:	0003      	movs	r3, r0
 8001102:	001a      	movs	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	189b      	adds	r3, r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	3301      	adds	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001110:	e002      	b.n	8001118 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3b01      	subs	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f9      	bne.n	8001112 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800111e:	e067      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a2a      	ldr	r2, [pc, #168]	@ (80011d0 <HAL_ADC_ConfigChannel+0x374>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d162      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	2380      	movs	r3, #128	@ 0x80
 800112e:	03db      	lsls	r3, r3, #15
 8001130:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001132:	d15d      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	2280      	movs	r2, #128	@ 0x80
 8001138:	03d2      	lsls	r2, r2, #15
 800113a:	4313      	orrs	r3, r2
 800113c:	4a20      	ldr	r2, [pc, #128]	@ (80011c0 <HAL_ADC_ConfigChannel+0x364>)
 800113e:	0019      	movs	r1, r3
 8001140:	0010      	movs	r0, r2
 8001142:	f7ff fbe7 	bl	8000914 <LL_ADC_SetCommonPathInternalCh>
 8001146:	e053      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	061b      	lsls	r3, r3, #24
 8001150:	429a      	cmp	r2, r3
 8001152:	d004      	beq.n	800115e <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001158:	4a18      	ldr	r2, [pc, #96]	@ (80011bc <HAL_ADC_ConfigChannel+0x360>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d107      	bne.n	800116e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	0019      	movs	r1, r3
 8001168:	0010      	movs	r0, r2
 800116a:	f7ff fc59 	bl	8000a20 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	da3c      	bge.n	80011f0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_ADC_ConfigChannel+0x364>)
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff fbdf 	bl	800093c <LL_ADC_GetCommonPathInternalCh>
 800117e:	0003      	movs	r3, r0
 8001180:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0f      	ldr	r2, [pc, #60]	@ (80011c4 <HAL_ADC_ConfigChannel+0x368>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d108      	bne.n	800119e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4a11      	ldr	r2, [pc, #68]	@ (80011d4 <HAL_ADC_ConfigChannel+0x378>)
 8001190:	4013      	ands	r3, r2
 8001192:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <HAL_ADC_ConfigChannel+0x364>)
 8001194:	0019      	movs	r1, r3
 8001196:	0010      	movs	r0, r2
 8001198:	f7ff fbbc 	bl	8000914 <LL_ADC_SetCommonPathInternalCh>
 800119c:	e028      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a0b      	ldr	r2, [pc, #44]	@ (80011d0 <HAL_ADC_ConfigChannel+0x374>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d123      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <HAL_ADC_ConfigChannel+0x37c>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <HAL_ADC_ConfigChannel+0x364>)
 80011b0:	0019      	movs	r1, r3
 80011b2:	0010      	movs	r0, r2
 80011b4:	f7ff fbae 	bl	8000914 <LL_ADC_SetCommonPathInternalCh>
 80011b8:	e01a      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x394>
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	80000004 	.word	0x80000004
 80011c0:	40012708 	.word	0x40012708
 80011c4:	a4000200 	.word	0xa4000200
 80011c8:	20000000 	.word	0x20000000
 80011cc:	00030d40 	.word	0x00030d40
 80011d0:	a8000400 	.word	0xa8000400
 80011d4:	ff7fffff 	.word	0xff7fffff
 80011d8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e0:	2220      	movs	r2, #32
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80011e8:	2317      	movs	r3, #23
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2254      	movs	r2, #84	@ 0x54
 80011f4:	2100      	movs	r1, #0
 80011f6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80011f8:	2317      	movs	r3, #23
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	781b      	ldrb	r3, [r3, #0]
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b006      	add	sp, #24
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			@ (mov r8, r8)

08001208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	0002      	movs	r2, r0
 8001210:	1dfb      	adds	r3, r7, #7
 8001212:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b7f      	cmp	r3, #127	@ 0x7f
 800121a:	d809      	bhi.n	8001230 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	001a      	movs	r2, r3
 8001222:	231f      	movs	r3, #31
 8001224:	401a      	ands	r2, r3
 8001226:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <__NVIC_EnableIRQ+0x30>)
 8001228:	2101      	movs	r1, #1
 800122a:	4091      	lsls	r1, r2
 800122c:	000a      	movs	r2, r1
 800122e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001230:	46c0      	nop			@ (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b002      	add	sp, #8
 8001236:	bd80      	pop	{r7, pc}
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	0002      	movs	r2, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001250:	d828      	bhi.n	80012a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001252:	4a2f      	ldr	r2, [pc, #188]	@ (8001310 <__NVIC_SetPriority+0xd4>)
 8001254:	1dfb      	adds	r3, r7, #7
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b25b      	sxtb	r3, r3
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	33c0      	adds	r3, #192	@ 0xc0
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	589b      	ldr	r3, [r3, r2]
 8001262:	1dfa      	adds	r2, r7, #7
 8001264:	7812      	ldrb	r2, [r2, #0]
 8001266:	0011      	movs	r1, r2
 8001268:	2203      	movs	r2, #3
 800126a:	400a      	ands	r2, r1
 800126c:	00d2      	lsls	r2, r2, #3
 800126e:	21ff      	movs	r1, #255	@ 0xff
 8001270:	4091      	lsls	r1, r2
 8001272:	000a      	movs	r2, r1
 8001274:	43d2      	mvns	r2, r2
 8001276:	401a      	ands	r2, r3
 8001278:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	019b      	lsls	r3, r3, #6
 800127e:	22ff      	movs	r2, #255	@ 0xff
 8001280:	401a      	ands	r2, r3
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	0018      	movs	r0, r3
 8001288:	2303      	movs	r3, #3
 800128a:	4003      	ands	r3, r0
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001290:	481f      	ldr	r0, [pc, #124]	@ (8001310 <__NVIC_SetPriority+0xd4>)
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b25b      	sxtb	r3, r3
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	430a      	orrs	r2, r1
 800129c:	33c0      	adds	r3, #192	@ 0xc0
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012a2:	e031      	b.n	8001308 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001314 <__NVIC_SetPriority+0xd8>)
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	0019      	movs	r1, r3
 80012ac:	230f      	movs	r3, #15
 80012ae:	400b      	ands	r3, r1
 80012b0:	3b08      	subs	r3, #8
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3306      	adds	r3, #6
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	18d3      	adds	r3, r2, r3
 80012ba:	3304      	adds	r3, #4
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	1dfa      	adds	r2, r7, #7
 80012c0:	7812      	ldrb	r2, [r2, #0]
 80012c2:	0011      	movs	r1, r2
 80012c4:	2203      	movs	r2, #3
 80012c6:	400a      	ands	r2, r1
 80012c8:	00d2      	lsls	r2, r2, #3
 80012ca:	21ff      	movs	r1, #255	@ 0xff
 80012cc:	4091      	lsls	r1, r2
 80012ce:	000a      	movs	r2, r1
 80012d0:	43d2      	mvns	r2, r2
 80012d2:	401a      	ands	r2, r3
 80012d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	019b      	lsls	r3, r3, #6
 80012da:	22ff      	movs	r2, #255	@ 0xff
 80012dc:	401a      	ands	r2, r3
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	0018      	movs	r0, r3
 80012e4:	2303      	movs	r3, #3
 80012e6:	4003      	ands	r3, r0
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ec:	4809      	ldr	r0, [pc, #36]	@ (8001314 <__NVIC_SetPriority+0xd8>)
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	001c      	movs	r4, r3
 80012f4:	230f      	movs	r3, #15
 80012f6:	4023      	ands	r3, r4
 80012f8:	3b08      	subs	r3, #8
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	430a      	orrs	r2, r1
 80012fe:	3306      	adds	r3, #6
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	18c3      	adds	r3, r0, r3
 8001304:	3304      	adds	r3, #4
 8001306:	601a      	str	r2, [r3, #0]
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b003      	add	sp, #12
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	1e5a      	subs	r2, r3, #1
 8001324:	2380      	movs	r3, #128	@ 0x80
 8001326:	045b      	lsls	r3, r3, #17
 8001328:	429a      	cmp	r2, r3
 800132a:	d301      	bcc.n	8001330 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132c:	2301      	movs	r3, #1
 800132e:	e010      	b.n	8001352 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <SysTick_Config+0x44>)
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	3a01      	subs	r2, #1
 8001336:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001338:	2301      	movs	r3, #1
 800133a:	425b      	negs	r3, r3
 800133c:	2103      	movs	r1, #3
 800133e:	0018      	movs	r0, r3
 8001340:	f7ff ff7c 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <SysTick_Config+0x44>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134a:	4b04      	ldr	r3, [pc, #16]	@ (800135c <SysTick_Config+0x44>)
 800134c:	2207      	movs	r2, #7
 800134e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001350:	2300      	movs	r3, #0
}
 8001352:	0018      	movs	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	e000e010 	.word	0xe000e010

08001360 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	210f      	movs	r1, #15
 800136c:	187b      	adds	r3, r7, r1
 800136e:	1c02      	adds	r2, r0, #0
 8001370:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	187b      	adds	r3, r7, r1
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b25b      	sxtb	r3, r3
 800137a:	0011      	movs	r1, r2
 800137c:	0018      	movs	r0, r3
 800137e:	f7ff ff5d 	bl	800123c <__NVIC_SetPriority>
}
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	b004      	add	sp, #16
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	0002      	movs	r2, r0
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b25b      	sxtb	r3, r3
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff ff33 	bl	8001208 <__NVIC_EnableIRQ>
}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b002      	add	sp, #8
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff ffaf 	bl	8001318 <SysTick_Config>
 80013ba:	0003      	movs	r3, r0
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80013d2:	e153      	b.n	800167c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2101      	movs	r1, #1
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4091      	lsls	r1, r2
 80013de:	000a      	movs	r2, r1
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d100      	bne.n	80013ec <HAL_GPIO_Init+0x28>
 80013ea:	e144      	b.n	8001676 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x38>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b12      	cmp	r3, #18
 80013fa:	d125      	bne.n	8001448 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	08da      	lsrs	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3208      	adds	r2, #8
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	58d3      	ldr	r3, [r2, r3]
 8001408:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	2207      	movs	r2, #7
 800140e:	4013      	ands	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	220f      	movs	r2, #15
 8001414:	409a      	lsls	r2, r3
 8001416:	0013      	movs	r3, r2
 8001418:	43da      	mvns	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	4013      	ands	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	220f      	movs	r2, #15
 8001426:	401a      	ands	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	2107      	movs	r1, #7
 800142c:	400b      	ands	r3, r1
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	409a      	lsls	r2, r3
 8001432:	0013      	movs	r3, r2
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	4313      	orrs	r3, r2
 8001438:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	08da      	lsrs	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3208      	adds	r2, #8
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	6979      	ldr	r1, [r7, #20]
 8001446:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	409a      	lsls	r2, r3
 8001456:	0013      	movs	r3, r2
 8001458:	43da      	mvns	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	4013      	ands	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	401a      	ands	r2, r3
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	409a      	lsls	r2, r3
 800146e:	0013      	movs	r3, r2
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	4313      	orrs	r3, r2
 8001474:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d00b      	beq.n	800149c <HAL_GPIO_Init+0xd8>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d007      	beq.n	800149c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001490:	2b11      	cmp	r3, #17
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b12      	cmp	r3, #18
 800149a:	d130      	bne.n	80014fe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	409a      	lsls	r2, r3
 80014aa:	0013      	movs	r3, r2
 80014ac:	43da      	mvns	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	4013      	ands	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	409a      	lsls	r2, r3
 80014be:	0013      	movs	r3, r2
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014d2:	2201      	movs	r2, #1
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	409a      	lsls	r2, r3
 80014d8:	0013      	movs	r3, r2
 80014da:	43da      	mvns	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	4013      	ands	r3, r2
 80014e0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	2201      	movs	r2, #1
 80014ea:	401a      	ands	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	409a      	lsls	r2, r3
 80014f0:	0013      	movs	r3, r2
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d017      	beq.n	8001536 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	409a      	lsls	r2, r3
 8001514:	0013      	movs	r3, r2
 8001516:	43da      	mvns	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	4013      	ands	r3, r2
 800151c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	409a      	lsls	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4313      	orrs	r3, r2
 800152e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	2380      	movs	r3, #128	@ 0x80
 800153c:	055b      	lsls	r3, r3, #21
 800153e:	4013      	ands	r3, r2
 8001540:	d100      	bne.n	8001544 <HAL_GPIO_Init+0x180>
 8001542:	e098      	b.n	8001676 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001544:	4a53      	ldr	r2, [pc, #332]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3318      	adds	r3, #24
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	589b      	ldr	r3, [r3, r2]
 8001550:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	2203      	movs	r2, #3
 8001556:	4013      	ands	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	220f      	movs	r2, #15
 800155c:	409a      	lsls	r2, r3
 800155e:	0013      	movs	r3, r2
 8001560:	43da      	mvns	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	4013      	ands	r3, r2
 8001566:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	23a0      	movs	r3, #160	@ 0xa0
 800156c:	05db      	lsls	r3, r3, #23
 800156e:	429a      	cmp	r2, r3
 8001570:	d019      	beq.n	80015a6 <HAL_GPIO_Init+0x1e2>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a48      	ldr	r2, [pc, #288]	@ (8001698 <HAL_GPIO_Init+0x2d4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0x1de>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a47      	ldr	r2, [pc, #284]	@ (800169c <HAL_GPIO_Init+0x2d8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00d      	beq.n	800159e <HAL_GPIO_Init+0x1da>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a46      	ldr	r2, [pc, #280]	@ (80016a0 <HAL_GPIO_Init+0x2dc>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x1d6>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a45      	ldr	r2, [pc, #276]	@ (80016a4 <HAL_GPIO_Init+0x2e0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_GPIO_Init+0x1d2>
 8001592:	2305      	movs	r3, #5
 8001594:	e008      	b.n	80015a8 <HAL_GPIO_Init+0x1e4>
 8001596:	2306      	movs	r3, #6
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x1e4>
 800159a:	2303      	movs	r3, #3
 800159c:	e004      	b.n	80015a8 <HAL_GPIO_Init+0x1e4>
 800159e:	2302      	movs	r3, #2
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_Init+0x1e4>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_GPIO_Init+0x1e4>
 80015a6:	2300      	movs	r3, #0
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	2103      	movs	r1, #3
 80015ac:	400a      	ands	r2, r1
 80015ae:	00d2      	lsls	r2, r2, #3
 80015b0:	4093      	lsls	r3, r2
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80015b8:	4936      	ldr	r1, [pc, #216]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3318      	adds	r3, #24
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80015c6:	4a33      	ldr	r2, [pc, #204]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	58d3      	ldr	r3, [r2, r3]
 80015cc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43da      	mvns	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	025b      	lsls	r3, r3, #9
 80015e0:	4013      	ands	r3, r2
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80015ec:	4929      	ldr	r1, [pc, #164]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 80015ee:	2280      	movs	r2, #128	@ 0x80
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80015f4:	4a27      	ldr	r2, [pc, #156]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 80015f6:	2384      	movs	r3, #132	@ 0x84
 80015f8:	58d3      	ldr	r3, [r2, r3]
 80015fa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43da      	mvns	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	4013      	ands	r3, r2
 8001604:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	029b      	lsls	r3, r3, #10
 800160e:	4013      	ands	r3, r2
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800161a:	491e      	ldr	r1, [pc, #120]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 800161c:	2284      	movs	r2, #132	@ 0x84
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001622:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43da      	mvns	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	4013      	ands	r3, r2
 8001630:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	2380      	movs	r3, #128	@ 0x80
 8001638:	035b      	lsls	r3, r3, #13
 800163a:	4013      	ands	r3, r2
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001646:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43da      	mvns	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	4013      	ands	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	039b      	lsls	r3, r3, #14
 8001664:	4013      	ands	r3, r2
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	3301      	adds	r3, #1
 800167a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	40da      	lsrs	r2, r3
 8001684:	1e13      	subs	r3, r2, #0
 8001686:	d000      	beq.n	800168a <HAL_GPIO_Init+0x2c6>
 8001688:	e6a4      	b.n	80013d4 <HAL_GPIO_Init+0x10>
  }
}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	46c0      	nop			@ (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	b006      	add	sp, #24
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021800 	.word	0x40021800
 8001698:	50000400 	.word	0x50000400
 800169c:	50000800 	.word	0x50000800
 80016a0:	50000c00 	.word	0x50000c00
 80016a4:	50001400 	.word	0x50001400

080016a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	0008      	movs	r0, r1
 80016b2:	0011      	movs	r1, r2
 80016b4:	1cbb      	adds	r3, r7, #2
 80016b6:	1c02      	adds	r2, r0, #0
 80016b8:	801a      	strh	r2, [r3, #0]
 80016ba:	1c7b      	adds	r3, r7, #1
 80016bc:	1c0a      	adds	r2, r1, #0
 80016be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c0:	1c7b      	adds	r3, r7, #1
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d004      	beq.n	80016d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016c8:	1cbb      	adds	r3, r7, #2
 80016ca:	881a      	ldrh	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d0:	e003      	b.n	80016da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d2:	1cbb      	adds	r3, r7, #2
 80016d4:	881a      	ldrh	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	b002      	add	sp, #8
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	000a      	movs	r2, r1
 80016ec:	1cbb      	adds	r3, r7, #2
 80016ee:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016f6:	1cbb      	adds	r3, r7, #2
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4013      	ands	r3, r2
 80016fe:	041a      	lsls	r2, r3, #16
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	43db      	mvns	r3, r3
 8001704:	1cb9      	adds	r1, r7, #2
 8001706:	8809      	ldrh	r1, [r1, #0]
 8001708:	400b      	ands	r3, r1
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
}
 8001710:	46c0      	nop			@ (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	b004      	add	sp, #16
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	0002      	movs	r2, r0
 8001720:	1dbb      	adds	r3, r7, #6
 8001722:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001724:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	1dba      	adds	r2, r7, #6
 800172a:	8812      	ldrh	r2, [r2, #0]
 800172c:	4013      	ands	r3, r2
 800172e:	d008      	beq.n	8001742 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001730:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001732:	1dba      	adds	r2, r7, #6
 8001734:	8812      	ldrh	r2, [r2, #0]
 8001736:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001738:	1dbb      	adds	r3, r7, #6
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	0018      	movs	r0, r3
 800173e:	f000 f815 	bl	800176c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	1dba      	adds	r2, r7, #6
 8001748:	8812      	ldrh	r2, [r2, #0]
 800174a:	4013      	ands	r3, r2
 800174c:	d008      	beq.n	8001760 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001750:	1dba      	adds	r2, r7, #6
 8001752:	8812      	ldrh	r2, [r2, #0]
 8001754:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001756:	1dbb      	adds	r3, r7, #6
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	0018      	movs	r0, r3
 800175c:	f000 f810 	bl	8001780 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001760:	46c0      	nop			@ (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	b002      	add	sp, #8
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40021800 	.word	0x40021800

0800176c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	0002      	movs	r2, r0
 8001774:	1dbb      	adds	r3, r7, #6
 8001776:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001778:	46c0      	nop			@ (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	b002      	add	sp, #8
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	0002      	movs	r2, r0
 8001788:	1dbb      	adds	r3, r7, #6
 800178a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800178c:	46c0      	nop			@ (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e1d0      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2201      	movs	r2, #1
 80017ac:	4013      	ands	r3, r2
 80017ae:	d100      	bne.n	80017b2 <HAL_RCC_OscConfig+0x1e>
 80017b0:	e069      	b.n	8001886 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b2:	4bc8      	ldr	r3, [pc, #800]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2238      	movs	r2, #56	@ 0x38
 80017b8:	4013      	ands	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d105      	bne.n	80017ce <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d15d      	bne.n	8001886 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e1bc      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	2380      	movs	r3, #128	@ 0x80
 80017d4:	025b      	lsls	r3, r3, #9
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_OscConfig+0x56>
 80017da:	4bbe      	ldr	r3, [pc, #760]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4bbd      	ldr	r3, [pc, #756]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 80017e0:	2180      	movs	r1, #128	@ 0x80
 80017e2:	0249      	lsls	r1, r1, #9
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e020      	b.n	800182c <HAL_RCC_OscConfig+0x98>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	23a0      	movs	r3, #160	@ 0xa0
 80017f0:	02db      	lsls	r3, r3, #11
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d10e      	bne.n	8001814 <HAL_RCC_OscConfig+0x80>
 80017f6:	4bb7      	ldr	r3, [pc, #732]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4bb6      	ldr	r3, [pc, #728]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 80017fc:	2180      	movs	r1, #128	@ 0x80
 80017fe:	02c9      	lsls	r1, r1, #11
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	4bb3      	ldr	r3, [pc, #716]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4bb2      	ldr	r3, [pc, #712]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 800180a:	2180      	movs	r1, #128	@ 0x80
 800180c:	0249      	lsls	r1, r1, #9
 800180e:	430a      	orrs	r2, r1
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e00b      	b.n	800182c <HAL_RCC_OscConfig+0x98>
 8001814:	4baf      	ldr	r3, [pc, #700]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4bae      	ldr	r3, [pc, #696]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 800181a:	49af      	ldr	r1, [pc, #700]	@ (8001ad8 <HAL_RCC_OscConfig+0x344>)
 800181c:	400a      	ands	r2, r1
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	4bac      	ldr	r3, [pc, #688]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4bab      	ldr	r3, [pc, #684]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001826:	49ad      	ldr	r1, [pc, #692]	@ (8001adc <HAL_RCC_OscConfig+0x348>)
 8001828:	400a      	ands	r2, r1
 800182a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d014      	beq.n	800185e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff f840 	bl	80008b8 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800183e:	f7ff f83b 	bl	80008b8 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b64      	cmp	r3, #100	@ 0x64
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e17b      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001850:	4ba0      	ldr	r3, [pc, #640]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	@ 0x80
 8001856:	029b      	lsls	r3, r3, #10
 8001858:	4013      	ands	r3, r2
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0xaa>
 800185c:	e013      	b.n	8001886 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185e:	f7ff f82b 	bl	80008b8 <HAL_GetTick>
 8001862:	0003      	movs	r3, r0
 8001864:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001868:	f7ff f826 	bl	80008b8 <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	@ 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e166      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187a:	4b96      	ldr	r3, [pc, #600]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	2380      	movs	r3, #128	@ 0x80
 8001880:	029b      	lsls	r3, r3, #10
 8001882:	4013      	ands	r3, r2
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2202      	movs	r2, #2
 800188c:	4013      	ands	r3, r2
 800188e:	d100      	bne.n	8001892 <HAL_RCC_OscConfig+0xfe>
 8001890:	e086      	b.n	80019a0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001892:	4b90      	ldr	r3, [pc, #576]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2238      	movs	r2, #56	@ 0x38
 8001898:	4013      	ands	r3, r2
 800189a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d12f      	bne.n	8001902 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e14c      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ae:	4b89      	ldr	r3, [pc, #548]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4a8b      	ldr	r2, [pc, #556]	@ (8001ae0 <HAL_RCC_OscConfig+0x34c>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	0019      	movs	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	021a      	lsls	r2, r3, #8
 80018be:	4b85      	ldr	r3, [pc, #532]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 80018c0:	430a      	orrs	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d112      	bne.n	80018f0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018ca:	4b82      	ldr	r3, [pc, #520]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a85      	ldr	r2, [pc, #532]	@ (8001ae4 <HAL_RCC_OscConfig+0x350>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018de:	4b7d      	ldr	r3, [pc, #500]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	0adb      	lsrs	r3, r3, #11
 80018e4:	2207      	movs	r2, #7
 80018e6:	4013      	ands	r3, r2
 80018e8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ae8 <HAL_RCC_OscConfig+0x354>)
 80018ea:	40da      	lsrs	r2, r3
 80018ec:	4b7f      	ldr	r3, [pc, #508]	@ (8001aec <HAL_RCC_OscConfig+0x358>)
 80018ee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018f0:	4b7f      	ldr	r3, [pc, #508]	@ (8001af0 <HAL_RCC_OscConfig+0x35c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7fe ff83 	bl	8000800 <HAL_InitTick>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d050      	beq.n	80019a0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e122      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d030      	beq.n	800196c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800190a:	4b72      	ldr	r3, [pc, #456]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a75      	ldr	r2, [pc, #468]	@ (8001ae4 <HAL_RCC_OscConfig+0x350>)
 8001910:	4013      	ands	r3, r2
 8001912:	0019      	movs	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	4b6e      	ldr	r3, [pc, #440]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 800191a:	430a      	orrs	r2, r1
 800191c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800191e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001924:	2180      	movs	r1, #128	@ 0x80
 8001926:	0049      	lsls	r1, r1, #1
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7fe ffc4 	bl	80008b8 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001936:	f7fe ffbf 	bl	80008b8 <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e0ff      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001948:	4b62      	ldr	r3, [pc, #392]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2380      	movs	r3, #128	@ 0x80
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4013      	ands	r3, r2
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001954:	4b5f      	ldr	r3, [pc, #380]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a61      	ldr	r2, [pc, #388]	@ (8001ae0 <HAL_RCC_OscConfig+0x34c>)
 800195a:	4013      	ands	r3, r2
 800195c:	0019      	movs	r1, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	021a      	lsls	r2, r3, #8
 8001964:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	e019      	b.n	80019a0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800196c:	4b59      	ldr	r3, [pc, #356]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b58      	ldr	r3, [pc, #352]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001972:	4960      	ldr	r1, [pc, #384]	@ (8001af4 <HAL_RCC_OscConfig+0x360>)
 8001974:	400a      	ands	r2, r1
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7fe ff9e 	bl	80008b8 <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001982:	f7fe ff99 	bl	80008b8 <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e0d9      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001994:	4b4f      	ldr	r3, [pc, #316]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4013      	ands	r3, r2
 800199e:	d1f0      	bne.n	8001982 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2208      	movs	r2, #8
 80019a6:	4013      	ands	r3, r2
 80019a8:	d042      	beq.n	8001a30 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80019aa:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2238      	movs	r2, #56	@ 0x38
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b18      	cmp	r3, #24
 80019b4:	d105      	bne.n	80019c2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d138      	bne.n	8001a30 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0c2      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d019      	beq.n	80019fe <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019ca:	4b42      	ldr	r3, [pc, #264]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 80019cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019ce:	4b41      	ldr	r3, [pc, #260]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 80019d0:	2101      	movs	r1, #1
 80019d2:	430a      	orrs	r2, r1
 80019d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7fe ff6f 	bl	80008b8 <HAL_GetTick>
 80019da:	0003      	movs	r3, r0
 80019dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80019e0:	f7fe ff6a 	bl	80008b8 <HAL_GetTick>
 80019e4:	0002      	movs	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e0aa      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80019f2:	4b38      	ldr	r3, [pc, #224]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 80019f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d0f1      	beq.n	80019e0 <HAL_RCC_OscConfig+0x24c>
 80019fc:	e018      	b.n	8001a30 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019fe:	4b35      	ldr	r3, [pc, #212]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001a00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a02:	4b34      	ldr	r3, [pc, #208]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001a04:	2101      	movs	r1, #1
 8001a06:	438a      	bics	r2, r1
 8001a08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7fe ff55 	bl	80008b8 <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001a14:	f7fe ff50 	bl	80008b8 <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e090      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001a26:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d1f1      	bne.n	8001a14 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2204      	movs	r2, #4
 8001a36:	4013      	ands	r3, r2
 8001a38:	d100      	bne.n	8001a3c <HAL_RCC_OscConfig+0x2a8>
 8001a3a:	e084      	b.n	8001b46 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3c:	230f      	movs	r3, #15
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001a44:	4b23      	ldr	r3, [pc, #140]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2238      	movs	r2, #56	@ 0x38
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d000      	beq.n	8001a5a <HAL_RCC_OscConfig+0x2c6>
 8001a58:	e075      	b.n	8001b46 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e074      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d106      	bne.n	8001a74 <HAL_RCC_OscConfig+0x2e0>
 8001a66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001a68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a72:	e01c      	b.n	8001aae <HAL_RCC_OscConfig+0x31a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d10c      	bne.n	8001a96 <HAL_RCC_OscConfig+0x302>
 8001a7c:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001a7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a80:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001a82:	2104      	movs	r1, #4
 8001a84:	430a      	orrs	r2, r1
 8001a86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a88:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001a8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001a8e:	2101      	movs	r1, #1
 8001a90:	430a      	orrs	r2, r1
 8001a92:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a94:	e00b      	b.n	8001aae <HAL_RCC_OscConfig+0x31a>
 8001a96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001a98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	438a      	bics	r2, r1
 8001aa0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001aa4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_RCC_OscConfig+0x340>)
 8001aa8:	2104      	movs	r1, #4
 8001aaa:	438a      	bics	r2, r1
 8001aac:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d028      	beq.n	8001b08 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7fe feff 	bl	80008b8 <HAL_GetTick>
 8001aba:	0003      	movs	r3, r0
 8001abc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001abe:	e01d      	b.n	8001afc <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac0:	f7fe fefa 	bl	80008b8 <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	4a0b      	ldr	r2, [pc, #44]	@ (8001af8 <HAL_RCC_OscConfig+0x364>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d915      	bls.n	8001afc <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e039      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	fffeffff 	.word	0xfffeffff
 8001adc:	fffbffff 	.word	0xfffbffff
 8001ae0:	ffff80ff 	.word	0xffff80ff
 8001ae4:	ffffc7ff 	.word	0xffffc7ff
 8001ae8:	02dc6c00 	.word	0x02dc6c00
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000004 	.word	0x20000004
 8001af4:	fffffeff 	.word	0xfffffeff
 8001af8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001afc:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <HAL_RCC_OscConfig+0x3bc>)
 8001afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b00:	2202      	movs	r2, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	d0dc      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x32c>
 8001b06:	e013      	b.n	8001b30 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7fe fed6 	bl	80008b8 <HAL_GetTick>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001b10:	e009      	b.n	8001b26 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7fe fed1 	bl	80008b8 <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <HAL_RCC_OscConfig+0x3c0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e010      	b.n	8001b48 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_RCC_OscConfig+0x3bc>)
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b30:	230f      	movs	r3, #15
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d105      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b3a:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_RCC_OscConfig+0x3bc>)
 8001b3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b3e:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <HAL_RCC_OscConfig+0x3bc>)
 8001b40:	4905      	ldr	r1, [pc, #20]	@ (8001b58 <HAL_RCC_OscConfig+0x3c4>)
 8001b42:	400a      	ands	r2, r1
 8001b44:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	0018      	movs	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b006      	add	sp, #24
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000
 8001b54:	00001388 	.word	0x00001388
 8001b58:	efffffff 	.word	0xefffffff

08001b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0e9      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b76      	ldr	r3, [pc, #472]	@ (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2207      	movs	r2, #7
 8001b76:	4013      	ands	r3, r2
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d91e      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b73      	ldr	r3, [pc, #460]	@ (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2207      	movs	r2, #7
 8001b84:	4393      	bics	r3, r2
 8001b86:	0019      	movs	r1, r3
 8001b88:	4b70      	ldr	r3, [pc, #448]	@ (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b90:	f7fe fe92 	bl	80008b8 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b98:	e009      	b.n	8001bae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9a:	f7fe fe8d 	bl	80008b8 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	4a6a      	ldr	r2, [pc, #424]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e0ca      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bae:	4b67      	ldr	r3, [pc, #412]	@ (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1ee      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d017      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d008      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bd0:	4b60      	ldr	r3, [pc, #384]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a60      	ldr	r2, [pc, #384]	@ (8001d58 <HAL_RCC_ClockConfig+0x1fc>)
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001bda:	21b0      	movs	r1, #176	@ 0xb0
 8001bdc:	0109      	lsls	r1, r1, #4
 8001bde:	430a      	orrs	r2, r1
 8001be0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be2:	4b5c      	ldr	r3, [pc, #368]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	4a5d      	ldr	r2, [pc, #372]	@ (8001d5c <HAL_RCC_ClockConfig+0x200>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	4b58      	ldr	r3, [pc, #352]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d055      	beq.n	8001cac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001c00:	4b54      	ldr	r3, [pc, #336]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	221c      	movs	r2, #28
 8001c06:	4393      	bics	r3, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	4b51      	ldr	r3, [pc, #324]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2380      	movs	r3, #128	@ 0x80
 8001c22:	029b      	lsls	r3, r3, #10
 8001c24:	4013      	ands	r3, r2
 8001c26:	d11f      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e08b      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c34:	4b47      	ldr	r3, [pc, #284]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d113      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e07f      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c4c:	4b41      	ldr	r3, [pc, #260]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c50:	2202      	movs	r2, #2
 8001c52:	4013      	ands	r3, r2
 8001c54:	d108      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e074      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5e:	2202      	movs	r2, #2
 8001c60:	4013      	ands	r3, r2
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e06d      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c68:	4b3a      	ldr	r3, [pc, #232]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	4393      	bics	r3, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	4b37      	ldr	r3, [pc, #220]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c7c:	f7fe fe1c 	bl	80008b8 <HAL_GetTick>
 8001c80:	0003      	movs	r3, r0
 8001c82:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c84:	e009      	b.n	8001c9a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001c86:	f7fe fe17 	bl	80008b8 <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	4a2f      	ldr	r2, [pc, #188]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e054      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2238      	movs	r2, #56	@ 0x38
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d1ec      	bne.n	8001c86 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cac:	4b27      	ldr	r3, [pc, #156]	@ (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d21e      	bcs.n	8001cf8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	4393      	bics	r3, r2
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ccc:	f7fe fdf4 	bl	80008b8 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd4:	e009      	b.n	8001cea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd6:	f7fe fdef 	bl	80008b8 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e02c      	b.n	8001d44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cea:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2207      	movs	r2, #7
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d1ee      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d009      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4a16      	ldr	r2, [pc, #88]	@ (8001d60 <HAL_RCC_ClockConfig+0x204>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d12:	430a      	orrs	r2, r1
 8001d14:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d16:	f000 f82b 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001d1a:	0001      	movs	r1, r0
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	220f      	movs	r2, #15
 8001d24:	401a      	ands	r2, r3
 8001d26:	4b0f      	ldr	r3, [pc, #60]	@ (8001d64 <HAL_RCC_ClockConfig+0x208>)
 8001d28:	0092      	lsls	r2, r2, #2
 8001d2a:	58d3      	ldr	r3, [r2, r3]
 8001d2c:	221f      	movs	r2, #31
 8001d2e:	4013      	ands	r3, r2
 8001d30:	000a      	movs	r2, r1
 8001d32:	40da      	lsrs	r2, r3
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <HAL_RCC_ClockConfig+0x20c>)
 8001d36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <HAL_RCC_ClockConfig+0x210>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7fe fd5f 	bl	8000800 <HAL_InitTick>
 8001d42:	0003      	movs	r3, r0
}
 8001d44:	0018      	movs	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b004      	add	sp, #16
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	00001388 	.word	0x00001388
 8001d54:	40021000 	.word	0x40021000
 8001d58:	ffff84ff 	.word	0xffff84ff
 8001d5c:	fffff0ff 	.word	0xfffff0ff
 8001d60:	ffff8fff 	.word	0xffff8fff
 8001d64:	08002880 	.word	0x08002880
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d76:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2238      	movs	r2, #56	@ 0x38
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d10f      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0adb      	lsrs	r3, r3, #11
 8001d86:	2207      	movs	r2, #7
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	0013      	movs	r3, r2
 8001d90:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d92:	6839      	ldr	r1, [r7, #0]
 8001d94:	4815      	ldr	r0, [pc, #84]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x7c>)
 8001d96:	f7fe f9b7 	bl	8000108 <__udivsi3>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	e01e      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2238      	movs	r2, #56	@ 0x38
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d102      	bne.n	8001db2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dac:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x80>)
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	e015      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001db2:	4b0d      	ldr	r3, [pc, #52]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2238      	movs	r2, #56	@ 0x38
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d103      	bne.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	e00b      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001dc6:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2238      	movs	r2, #56	@ 0x38
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b18      	cmp	r3, #24
 8001dd0:	d103      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001dd2:	23fa      	movs	r3, #250	@ 0xfa
 8001dd4:	01db      	lsls	r3, r3, #7
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	e001      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001dde:	687b      	ldr	r3, [r7, #4]
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b002      	add	sp, #8
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	02dc6c00 	.word	0x02dc6c00
 8001df0:	007a1200 	.word	0x007a1200

08001df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001dfc:	2313      	movs	r3, #19
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e04:	2312      	movs	r3, #18
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	@ 0x80
 8001e12:	029b      	lsls	r3, r3, #10
 8001e14:	4013      	ands	r3, r2
 8001e16:	d100      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e18:	e079      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1a:	2011      	movs	r0, #17
 8001e1c:	183b      	adds	r3, r7, r0
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e22:	4b64      	ldr	r3, [pc, #400]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e26:	2380      	movs	r3, #128	@ 0x80
 8001e28:	055b      	lsls	r3, r3, #21
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d110      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b61      	ldr	r3, [pc, #388]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e32:	4b60      	ldr	r3, [pc, #384]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e34:	2180      	movs	r1, #128	@ 0x80
 8001e36:	0549      	lsls	r1, r1, #21
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e3c:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	055b      	lsls	r3, r3, #21
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4a:	183b      	adds	r3, r7, r0
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001e50:	4b58      	ldr	r3, [pc, #352]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e54:	23c0      	movs	r3, #192	@ 0xc0
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d019      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d014      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001e6c:	4b51      	ldr	r3, [pc, #324]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e70:	4a51      	ldr	r2, [pc, #324]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e76:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e7a:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e7c:	2180      	movs	r1, #128	@ 0x80
 8001e7e:	0249      	lsls	r1, r1, #9
 8001e80:	430a      	orrs	r2, r1
 8001e82:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e84:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e88:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e8a:	494c      	ldr	r1, [pc, #304]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001e90:	4b48      	ldr	r3, [pc, #288]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d016      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9e:	f7fe fd0b 	bl	80008b8 <HAL_GetTick>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001ea6:	e00c      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea8:	f7fe fd06 	bl	80008b8 <HAL_GetTick>
 8001eac:	0002      	movs	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	4a43      	ldr	r2, [pc, #268]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d904      	bls.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001eb8:	2313      	movs	r3, #19
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	701a      	strb	r2, [r3, #0]
          break;
 8001ec0:	e004      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d0ed      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001ecc:	2313      	movs	r3, #19
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10a      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ed6:	4b37      	ldr	r3, [pc, #220]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eda:	4a37      	ldr	r2, [pc, #220]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699a      	ldr	r2, [r3, #24]
 8001ee4:	4b33      	ldr	r3, [pc, #204]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001eea:	e005      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eec:	2312      	movs	r3, #18
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	2213      	movs	r2, #19
 8001ef2:	18ba      	adds	r2, r7, r2
 8001ef4:	7812      	ldrb	r2, [r2, #0]
 8001ef6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ef8:	2311      	movs	r3, #17
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d105      	bne.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f02:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f06:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f08:	492e      	ldr	r1, [pc, #184]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4013      	ands	r3, r2
 8001f16:	d009      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f18:	4b26      	ldr	r3, [pc, #152]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	4393      	bics	r3, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	4b23      	ldr	r3, [pc, #140]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2240      	movs	r2, #64	@ 0x40
 8001f32:	4013      	ands	r3, r2
 8001f34:	d009      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f36:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3a:	4a23      	ldr	r2, [pc, #140]	@ (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	0019      	movs	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f46:	430a      	orrs	r2, r1
 8001f48:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	2380      	movs	r3, #128	@ 0x80
 8001f50:	01db      	lsls	r3, r3, #7
 8001f52:	4013      	ands	r3, r2
 8001f54:	d008      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f56:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	0899      	lsrs	r1, r3, #2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f64:	430a      	orrs	r2, r1
 8001f66:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	4013      	ands	r3, r2
 8001f72:	d009      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f74:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f78:	4a14      	ldr	r2, [pc, #80]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f84:	430a      	orrs	r2, r1
 8001f86:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da09      	bge.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001f90:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	22e0      	movs	r2, #224	@ 0xe0
 8001f96:	4393      	bics	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001fa4:	2312      	movs	r3, #18
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	781b      	ldrb	r3, [r3, #0]
}
 8001faa:	0018      	movs	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b006      	add	sp, #24
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			@ (mov r8, r8)
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	fffffcff 	.word	0xfffffcff
 8001fbc:	fffeffff 	.word	0xfffeffff
 8001fc0:	00001388 	.word	0x00001388
 8001fc4:	efffffff 	.word	0xefffffff
 8001fc8:	ffffcfff 	.word	0xffffcfff
 8001fcc:	ffff3fff 	.word	0xffff3fff

08001fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e04a      	b.n	8002078 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	223d      	movs	r2, #61	@ 0x3d
 8001fe6:	5c9b      	ldrb	r3, [r3, r2]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d107      	bne.n	8001ffe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	223c      	movs	r2, #60	@ 0x3c
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f7fe fb57 	bl	80006ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	223d      	movs	r2, #61	@ 0x3d
 8002002:	2102      	movs	r1, #2
 8002004:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3304      	adds	r3, #4
 800200e:	0019      	movs	r1, r3
 8002010:	0010      	movs	r0, r2
 8002012:	f000 fa7b 	bl	800250c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2248      	movs	r2, #72	@ 0x48
 800201a:	2101      	movs	r1, #1
 800201c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	223e      	movs	r2, #62	@ 0x3e
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	223f      	movs	r2, #63	@ 0x3f
 800202a:	2101      	movs	r1, #1
 800202c:	5499      	strb	r1, [r3, r2]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2240      	movs	r2, #64	@ 0x40
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2241      	movs	r2, #65	@ 0x41
 800203a:	2101      	movs	r1, #1
 800203c:	5499      	strb	r1, [r3, r2]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2242      	movs	r2, #66	@ 0x42
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2243      	movs	r2, #67	@ 0x43
 800204a:	2101      	movs	r1, #1
 800204c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2244      	movs	r2, #68	@ 0x44
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2245      	movs	r2, #69	@ 0x45
 800205a:	2101      	movs	r1, #1
 800205c:	5499      	strb	r1, [r3, r2]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2246      	movs	r2, #70	@ 0x46
 8002062:	2101      	movs	r1, #1
 8002064:	5499      	strb	r1, [r3, r2]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2247      	movs	r2, #71	@ 0x47
 800206a:	2101      	movs	r1, #1
 800206c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	223d      	movs	r2, #61	@ 0x3d
 8002072:	2101      	movs	r1, #1
 8002074:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	0018      	movs	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	b002      	add	sp, #8
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	223d      	movs	r2, #61	@ 0x3d
 800208c:	5c9b      	ldrb	r3, [r3, r2]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d001      	beq.n	8002098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e037      	b.n	8002108 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	223d      	movs	r2, #61	@ 0x3d
 800209c:	2102      	movs	r1, #2
 800209e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2101      	movs	r1, #1
 80020ac:	430a      	orrs	r2, r1
 80020ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a16      	ldr	r2, [pc, #88]	@ (8002110 <HAL_TIM_Base_Start_IT+0x90>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d004      	beq.n	80020c4 <HAL_TIM_Base_Start_IT+0x44>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a15      	ldr	r2, [pc, #84]	@ (8002114 <HAL_TIM_Base_Start_IT+0x94>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d116      	bne.n	80020f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4a13      	ldr	r2, [pc, #76]	@ (8002118 <HAL_TIM_Base_Start_IT+0x98>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d016      	beq.n	8002104 <HAL_TIM_Base_Start_IT+0x84>
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	2380      	movs	r3, #128	@ 0x80
 80020da:	025b      	lsls	r3, r3, #9
 80020dc:	429a      	cmp	r2, r3
 80020de:	d011      	beq.n	8002104 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2101      	movs	r1, #1
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f0:	e008      	b.n	8002104 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2101      	movs	r1, #1
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e000      	b.n	8002106 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002104:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	b004      	add	sp, #16
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40012c00 	.word	0x40012c00
 8002114:	40000400 	.word	0x40000400
 8002118:	00010007 	.word	0x00010007

0800211c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2202      	movs	r2, #2
 8002138:	4013      	ands	r3, r2
 800213a:	d021      	beq.n	8002180 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2202      	movs	r2, #2
 8002140:	4013      	ands	r3, r2
 8002142:	d01d      	beq.n	8002180 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2203      	movs	r2, #3
 800214a:	4252      	negs	r2, r2
 800214c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2203      	movs	r2, #3
 800215c:	4013      	ands	r3, r2
 800215e:	d004      	beq.n	800216a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	0018      	movs	r0, r3
 8002164:	f000 f9ba 	bl	80024dc <HAL_TIM_IC_CaptureCallback>
 8002168:	e007      	b.n	800217a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 f9ad 	bl	80024cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	0018      	movs	r0, r3
 8002176:	f000 f9b9 	bl	80024ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2204      	movs	r2, #4
 8002184:	4013      	ands	r3, r2
 8002186:	d022      	beq.n	80021ce <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2204      	movs	r2, #4
 800218c:	4013      	ands	r3, r2
 800218e:	d01e      	beq.n	80021ce <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2205      	movs	r2, #5
 8002196:	4252      	negs	r2, r2
 8002198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2202      	movs	r2, #2
 800219e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	23c0      	movs	r3, #192	@ 0xc0
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4013      	ands	r3, r2
 80021ac:	d004      	beq.n	80021b8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	0018      	movs	r0, r3
 80021b2:	f000 f993 	bl	80024dc <HAL_TIM_IC_CaptureCallback>
 80021b6:	e007      	b.n	80021c8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	0018      	movs	r0, r3
 80021bc:	f000 f986 	bl	80024cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 f992 	bl	80024ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2208      	movs	r2, #8
 80021d2:	4013      	ands	r3, r2
 80021d4:	d021      	beq.n	800221a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2208      	movs	r2, #8
 80021da:	4013      	ands	r3, r2
 80021dc:	d01d      	beq.n	800221a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2209      	movs	r2, #9
 80021e4:	4252      	negs	r2, r2
 80021e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2204      	movs	r2, #4
 80021ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	2203      	movs	r2, #3
 80021f6:	4013      	ands	r3, r2
 80021f8:	d004      	beq.n	8002204 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 f96d 	bl	80024dc <HAL_TIM_IC_CaptureCallback>
 8002202:	e007      	b.n	8002214 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f960 	bl	80024cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	0018      	movs	r0, r3
 8002210:	f000 f96c 	bl	80024ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2210      	movs	r2, #16
 800221e:	4013      	ands	r3, r2
 8002220:	d022      	beq.n	8002268 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2210      	movs	r2, #16
 8002226:	4013      	ands	r3, r2
 8002228:	d01e      	beq.n	8002268 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2211      	movs	r2, #17
 8002230:	4252      	negs	r2, r2
 8002232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2208      	movs	r2, #8
 8002238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	23c0      	movs	r3, #192	@ 0xc0
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4013      	ands	r3, r2
 8002246:	d004      	beq.n	8002252 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	0018      	movs	r0, r3
 800224c:	f000 f946 	bl	80024dc <HAL_TIM_IC_CaptureCallback>
 8002250:	e007      	b.n	8002262 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	0018      	movs	r0, r3
 8002256:	f000 f939 	bl	80024cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f000 f945 	bl	80024ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2201      	movs	r2, #1
 800226c:	4013      	ands	r3, r2
 800226e:	d00c      	beq.n	800228a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	4013      	ands	r3, r2
 8002276:	d008      	beq.n	800228a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2202      	movs	r2, #2
 800227e:	4252      	negs	r2, r2
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	0018      	movs	r0, r3
 8002286:	f7fe f975 	bl	8000574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2280      	movs	r2, #128	@ 0x80
 800228e:	4013      	ands	r3, r2
 8002290:	d00c      	beq.n	80022ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2280      	movs	r2, #128	@ 0x80
 8002296:	4013      	ands	r3, r2
 8002298:	d008      	beq.n	80022ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2281      	movs	r2, #129	@ 0x81
 80022a0:	4252      	negs	r2, r2
 80022a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 faa2 	bl	80027f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	2380      	movs	r3, #128	@ 0x80
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4013      	ands	r3, r2
 80022b4:	d00b      	beq.n	80022ce <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2280      	movs	r2, #128	@ 0x80
 80022ba:	4013      	ands	r3, r2
 80022bc:	d007      	beq.n	80022ce <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a16      	ldr	r2, [pc, #88]	@ (800231c <HAL_TIM_IRQHandler+0x200>)
 80022c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	0018      	movs	r0, r3
 80022ca:	f000 fa99 	bl	8002800 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2240      	movs	r2, #64	@ 0x40
 80022d2:	4013      	ands	r3, r2
 80022d4:	d00c      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2240      	movs	r2, #64	@ 0x40
 80022da:	4013      	ands	r3, r2
 80022dc:	d008      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2241      	movs	r2, #65	@ 0x41
 80022e4:	4252      	negs	r2, r2
 80022e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 f906 	bl	80024fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2220      	movs	r2, #32
 80022f4:	4013      	ands	r3, r2
 80022f6:	d00c      	beq.n	8002312 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2220      	movs	r2, #32
 80022fc:	4013      	ands	r3, r2
 80022fe:	d008      	beq.n	8002312 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2221      	movs	r2, #33	@ 0x21
 8002306:	4252      	negs	r2, r2
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	0018      	movs	r0, r3
 800230e:	f000 fa67 	bl	80027e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b004      	add	sp, #16
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	fffffeff 	.word	0xfffffeff

08002320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800232a:	230f      	movs	r3, #15
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	223c      	movs	r2, #60	@ 0x3c
 8002336:	5c9b      	ldrb	r3, [r3, r2]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_TIM_ConfigClockSource+0x20>
 800233c:	2302      	movs	r3, #2
 800233e:	e0bc      	b.n	80024ba <HAL_TIM_ConfigClockSource+0x19a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	223c      	movs	r2, #60	@ 0x3c
 8002344:	2101      	movs	r1, #1
 8002346:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	223d      	movs	r2, #61	@ 0x3d
 800234c:	2102      	movs	r1, #2
 800234e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4a5a      	ldr	r2, [pc, #360]	@ (80024c4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800235c:	4013      	ands	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4a59      	ldr	r2, [pc, #356]	@ (80024c8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002364:	4013      	ands	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2280      	movs	r2, #128	@ 0x80
 8002376:	0192      	lsls	r2, r2, #6
 8002378:	4293      	cmp	r3, r2
 800237a:	d040      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0xde>
 800237c:	2280      	movs	r2, #128	@ 0x80
 800237e:	0192      	lsls	r2, r2, #6
 8002380:	4293      	cmp	r3, r2
 8002382:	d900      	bls.n	8002386 <HAL_TIM_ConfigClockSource+0x66>
 8002384:	e088      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 8002386:	2280      	movs	r2, #128	@ 0x80
 8002388:	0152      	lsls	r2, r2, #5
 800238a:	4293      	cmp	r3, r2
 800238c:	d100      	bne.n	8002390 <HAL_TIM_ConfigClockSource+0x70>
 800238e:	e088      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x182>
 8002390:	2280      	movs	r2, #128	@ 0x80
 8002392:	0152      	lsls	r2, r2, #5
 8002394:	4293      	cmp	r3, r2
 8002396:	d900      	bls.n	800239a <HAL_TIM_ConfigClockSource+0x7a>
 8002398:	e07e      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 800239a:	2b70      	cmp	r3, #112	@ 0x70
 800239c:	d018      	beq.n	80023d0 <HAL_TIM_ConfigClockSource+0xb0>
 800239e:	d900      	bls.n	80023a2 <HAL_TIM_ConfigClockSource+0x82>
 80023a0:	e07a      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 80023a2:	2b60      	cmp	r3, #96	@ 0x60
 80023a4:	d04f      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x126>
 80023a6:	d900      	bls.n	80023aa <HAL_TIM_ConfigClockSource+0x8a>
 80023a8:	e076      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 80023aa:	2b50      	cmp	r3, #80	@ 0x50
 80023ac:	d03b      	beq.n	8002426 <HAL_TIM_ConfigClockSource+0x106>
 80023ae:	d900      	bls.n	80023b2 <HAL_TIM_ConfigClockSource+0x92>
 80023b0:	e072      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 80023b2:	2b40      	cmp	r3, #64	@ 0x40
 80023b4:	d057      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0x146>
 80023b6:	d900      	bls.n	80023ba <HAL_TIM_ConfigClockSource+0x9a>
 80023b8:	e06e      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 80023ba:	2b30      	cmp	r3, #48	@ 0x30
 80023bc:	d063      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x166>
 80023be:	d86b      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d060      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x166>
 80023c4:	d868      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d05d      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x166>
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d05b      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x166>
 80023ce:	e063      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023e0:	f000 f97c 	bl	80026dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2277      	movs	r2, #119	@ 0x77
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	609a      	str	r2, [r3, #8]
      break;
 80023fc:	e052      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800240e:	f000 f965 	bl	80026dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2180      	movs	r1, #128	@ 0x80
 800241e:	01c9      	lsls	r1, r1, #7
 8002420:	430a      	orrs	r2, r1
 8002422:	609a      	str	r2, [r3, #8]
      break;
 8002424:	e03e      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002432:	001a      	movs	r2, r3
 8002434:	f000 f8d6 	bl	80025e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2150      	movs	r1, #80	@ 0x50
 800243e:	0018      	movs	r0, r3
 8002440:	f000 f930 	bl	80026a4 <TIM_ITRx_SetConfig>
      break;
 8002444:	e02e      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002452:	001a      	movs	r2, r3
 8002454:	f000 f8f4 	bl	8002640 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2160      	movs	r1, #96	@ 0x60
 800245e:	0018      	movs	r0, r3
 8002460:	f000 f920 	bl	80026a4 <TIM_ITRx_SetConfig>
      break;
 8002464:	e01e      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002472:	001a      	movs	r2, r3
 8002474:	f000 f8b6 	bl	80025e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2140      	movs	r1, #64	@ 0x40
 800247e:	0018      	movs	r0, r3
 8002480:	f000 f910 	bl	80026a4 <TIM_ITRx_SetConfig>
      break;
 8002484:	e00e      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0019      	movs	r1, r3
 8002490:	0010      	movs	r0, r2
 8002492:	f000 f907 	bl	80026a4 <TIM_ITRx_SetConfig>
      break;
 8002496:	e005      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002498:	230f      	movs	r3, #15
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	2201      	movs	r2, #1
 800249e:	701a      	strb	r2, [r3, #0]
      break;
 80024a0:	e000      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80024a2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	223d      	movs	r2, #61	@ 0x3d
 80024a8:	2101      	movs	r1, #1
 80024aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	223c      	movs	r2, #60	@ 0x3c
 80024b0:	2100      	movs	r1, #0
 80024b2:	5499      	strb	r1, [r3, r2]

  return status;
 80024b4:	230f      	movs	r3, #15
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	781b      	ldrb	r3, [r3, #0]
}
 80024ba:	0018      	movs	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	b004      	add	sp, #16
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	ffceff88 	.word	0xffceff88
 80024c8:	ffff00ff 	.word	0xffff00ff

080024cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024d4:	46c0      	nop			@ (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024e4:	46c0      	nop			@ (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024f4:	46c0      	nop			@ (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b002      	add	sp, #8
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002504:	46c0      	nop			@ (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b002      	add	sp, #8
 800250a:	bd80      	pop	{r7, pc}

0800250c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a2b      	ldr	r2, [pc, #172]	@ (80025cc <TIM_Base_SetConfig+0xc0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d003      	beq.n	800252c <TIM_Base_SetConfig+0x20>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a2a      	ldr	r2, [pc, #168]	@ (80025d0 <TIM_Base_SetConfig+0xc4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d108      	bne.n	800253e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2270      	movs	r2, #112	@ 0x70
 8002530:	4393      	bics	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a22      	ldr	r2, [pc, #136]	@ (80025cc <TIM_Base_SetConfig+0xc0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00f      	beq.n	8002566 <TIM_Base_SetConfig+0x5a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a21      	ldr	r2, [pc, #132]	@ (80025d0 <TIM_Base_SetConfig+0xc4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00b      	beq.n	8002566 <TIM_Base_SetConfig+0x5a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a20      	ldr	r2, [pc, #128]	@ (80025d4 <TIM_Base_SetConfig+0xc8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d007      	beq.n	8002566 <TIM_Base_SetConfig+0x5a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a1f      	ldr	r2, [pc, #124]	@ (80025d8 <TIM_Base_SetConfig+0xcc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d003      	beq.n	8002566 <TIM_Base_SetConfig+0x5a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a1e      	ldr	r2, [pc, #120]	@ (80025dc <TIM_Base_SetConfig+0xd0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d108      	bne.n	8002578 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a1d      	ldr	r2, [pc, #116]	@ (80025e0 <TIM_Base_SetConfig+0xd4>)
 800256a:	4013      	ands	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2280      	movs	r2, #128	@ 0x80
 800257c:	4393      	bics	r3, r2
 800257e:	001a      	movs	r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a0a      	ldr	r2, [pc, #40]	@ (80025cc <TIM_Base_SetConfig+0xc0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d007      	beq.n	80025b6 <TIM_Base_SetConfig+0xaa>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a0b      	ldr	r2, [pc, #44]	@ (80025d8 <TIM_Base_SetConfig+0xcc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d003      	beq.n	80025b6 <TIM_Base_SetConfig+0xaa>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <TIM_Base_SetConfig+0xd0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d103      	bne.n	80025be <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	615a      	str	r2, [r3, #20]
}
 80025c4:	46c0      	nop			@ (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b004      	add	sp, #16
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40012c00 	.word	0x40012c00
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40002000 	.word	0x40002000
 80025d8:	40014400 	.word	0x40014400
 80025dc:	40014800 	.word	0x40014800
 80025e0:	fffffcff 	.word	0xfffffcff

080025e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	2201      	movs	r2, #1
 80025fc:	4393      	bics	r3, r2
 80025fe:	001a      	movs	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	22f0      	movs	r2, #240	@ 0xf0
 800260e:	4393      	bics	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	220a      	movs	r2, #10
 8002620:	4393      	bics	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	621a      	str	r2, [r3, #32]
}
 8002638:	46c0      	nop			@ (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	b006      	add	sp, #24
 800263e:	bd80      	pop	{r7, pc}

08002640 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	2210      	movs	r2, #16
 8002658:	4393      	bics	r3, r2
 800265a:	001a      	movs	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4a0d      	ldr	r2, [pc, #52]	@ (80026a0 <TIM_TI2_ConfigInputStage+0x60>)
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	031b      	lsls	r3, r3, #12
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	22a0      	movs	r2, #160	@ 0xa0
 800267c:	4393      	bics	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	621a      	str	r2, [r3, #32]
}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b006      	add	sp, #24
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	ffff0fff 	.word	0xffff0fff

080026a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a08      	ldr	r2, [pc, #32]	@ (80026d8 <TIM_ITRx_SetConfig+0x34>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	2207      	movs	r2, #7
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	609a      	str	r2, [r3, #8]
}
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b004      	add	sp, #16
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	ffcfff8f 	.word	0xffcfff8f

080026dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	4a09      	ldr	r2, [pc, #36]	@ (8002718 <TIM_ETR_SetConfig+0x3c>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	021a      	lsls	r2, r3, #8
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	431a      	orrs	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4313      	orrs	r3, r2
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	609a      	str	r2, [r3, #8]
}
 8002710:	46c0      	nop			@ (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b006      	add	sp, #24
 8002716:	bd80      	pop	{r7, pc}
 8002718:	ffff00ff 	.word	0xffff00ff

0800271c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	223c      	movs	r2, #60	@ 0x3c
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002730:	2302      	movs	r3, #2
 8002732:	e04a      	b.n	80027ca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	223c      	movs	r2, #60	@ 0x3c
 8002738:	2101      	movs	r1, #1
 800273a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	223d      	movs	r2, #61	@ 0x3d
 8002740:	2102      	movs	r1, #2
 8002742:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1e      	ldr	r2, [pc, #120]	@ (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d108      	bne.n	8002770 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4a1d      	ldr	r2, [pc, #116]	@ (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002762:	4013      	ands	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2270      	movs	r2, #112	@ 0x70
 8002774:	4393      	bics	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a11      	ldr	r2, [pc, #68]	@ (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a10      	ldr	r2, [pc, #64]	@ (80027dc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10c      	bne.n	80027b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2280      	movs	r2, #128	@ 0x80
 80027a2:	4393      	bics	r3, r2
 80027a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	223d      	movs	r2, #61	@ 0x3d
 80027bc:	2101      	movs	r1, #1
 80027be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	223c      	movs	r2, #60	@ 0x3c
 80027c4:	2100      	movs	r1, #0
 80027c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b004      	add	sp, #16
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	ff0fffff 	.word	0xff0fffff
 80027dc:	40000400 	.word	0x40000400

080027e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027e8:	46c0      	nop			@ (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027f8:	46c0      	nop			@ (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b002      	add	sp, #8
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002808:	46c0      	nop			@ (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	b002      	add	sp, #8
 800280e:	bd80      	pop	{r7, pc}

08002810 <memset>:
 8002810:	0003      	movs	r3, r0
 8002812:	1882      	adds	r2, r0, r2
 8002814:	4293      	cmp	r3, r2
 8002816:	d100      	bne.n	800281a <memset+0xa>
 8002818:	4770      	bx	lr
 800281a:	7019      	strb	r1, [r3, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	e7f9      	b.n	8002814 <memset+0x4>

08002820 <__libc_init_array>:
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	2600      	movs	r6, #0
 8002824:	4c0c      	ldr	r4, [pc, #48]	@ (8002858 <__libc_init_array+0x38>)
 8002826:	4d0d      	ldr	r5, [pc, #52]	@ (800285c <__libc_init_array+0x3c>)
 8002828:	1b64      	subs	r4, r4, r5
 800282a:	10a4      	asrs	r4, r4, #2
 800282c:	42a6      	cmp	r6, r4
 800282e:	d109      	bne.n	8002844 <__libc_init_array+0x24>
 8002830:	2600      	movs	r6, #0
 8002832:	f000 f819 	bl	8002868 <_init>
 8002836:	4c0a      	ldr	r4, [pc, #40]	@ (8002860 <__libc_init_array+0x40>)
 8002838:	4d0a      	ldr	r5, [pc, #40]	@ (8002864 <__libc_init_array+0x44>)
 800283a:	1b64      	subs	r4, r4, r5
 800283c:	10a4      	asrs	r4, r4, #2
 800283e:	42a6      	cmp	r6, r4
 8002840:	d105      	bne.n	800284e <__libc_init_array+0x2e>
 8002842:	bd70      	pop	{r4, r5, r6, pc}
 8002844:	00b3      	lsls	r3, r6, #2
 8002846:	58eb      	ldr	r3, [r5, r3]
 8002848:	4798      	blx	r3
 800284a:	3601      	adds	r6, #1
 800284c:	e7ee      	b.n	800282c <__libc_init_array+0xc>
 800284e:	00b3      	lsls	r3, r6, #2
 8002850:	58eb      	ldr	r3, [r5, r3]
 8002852:	4798      	blx	r3
 8002854:	3601      	adds	r6, #1
 8002856:	e7f2      	b.n	800283e <__libc_init_array+0x1e>
 8002858:	080028c0 	.word	0x080028c0
 800285c:	080028c0 	.word	0x080028c0
 8002860:	080028c4 	.word	0x080028c4
 8002864:	080028c0 	.word	0x080028c0

08002868 <_init>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286e:	bc08      	pop	{r3}
 8002870:	469e      	mov	lr, r3
 8002872:	4770      	bx	lr

08002874 <_fini>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287a:	bc08      	pop	{r3}
 800287c:	469e      	mov	lr, r3
 800287e:	4770      	bx	lr
